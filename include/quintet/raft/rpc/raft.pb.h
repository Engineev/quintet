// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#ifndef PROTOBUF_INCLUDED_raft_2eproto
#define PROTOBUF_INCLUDED_raft_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_raft_2eproto 

namespace protobuf_raft_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_raft_2eproto
namespace quintet {
namespace raft {
namespace rpc {
class PbAppendEntriesMessage;
class PbAppendEntriesMessageDefaultTypeInternal;
extern PbAppendEntriesMessageDefaultTypeInternal _PbAppendEntriesMessage_default_instance_;
class PbLogEntry;
class PbLogEntryDefaultTypeInternal;
extern PbLogEntryDefaultTypeInternal _PbLogEntry_default_instance_;
class PbReply;
class PbReplyDefaultTypeInternal;
extern PbReplyDefaultTypeInternal _PbReply_default_instance_;
class PbRequestVoteMessage;
class PbRequestVoteMessageDefaultTypeInternal;
extern PbRequestVoteMessageDefaultTypeInternal _PbRequestVoteMessage_default_instance_;
}  // namespace rpc
}  // namespace raft
}  // namespace quintet
namespace google {
namespace protobuf {
template<> ::quintet::raft::rpc::PbAppendEntriesMessage* Arena::CreateMaybeMessage<::quintet::raft::rpc::PbAppendEntriesMessage>(Arena*);
template<> ::quintet::raft::rpc::PbLogEntry* Arena::CreateMaybeMessage<::quintet::raft::rpc::PbLogEntry>(Arena*);
template<> ::quintet::raft::rpc::PbReply* Arena::CreateMaybeMessage<::quintet::raft::rpc::PbReply>(Arena*);
template<> ::quintet::raft::rpc::PbRequestVoteMessage* Arena::CreateMaybeMessage<::quintet::raft::rpc::PbRequestVoteMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace quintet {
namespace raft {
namespace rpc {

// ===================================================================

class PbReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.raft.rpc.PbReply) */ {
 public:
  PbReply();
  virtual ~PbReply();

  PbReply(const PbReply& from);

  inline PbReply& operator=(const PbReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbReply(PbReply&& from) noexcept
    : PbReply() {
    *this = ::std::move(from);
  }

  inline PbReply& operator=(PbReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbReply* internal_default_instance() {
    return reinterpret_cast<const PbReply*>(
               &_PbReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PbReply* other);
  friend void swap(PbReply& a, PbReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbReply* New() const final {
    return CreateMaybeMessage<PbReply>(NULL);
  }

  PbReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PbReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PbReply& from);
  void MergeFrom(const PbReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // bool ans = 2;
  void clear_ans();
  static const int kAnsFieldNumber = 2;
  bool ans() const;
  void set_ans(bool value);

  // @@protoc_insertion_point(class_scope:quintet.raft.rpc.PbReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  bool ans_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PbLogEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.raft.rpc.PbLogEntry) */ {
 public:
  PbLogEntry();
  virtual ~PbLogEntry();

  PbLogEntry(const PbLogEntry& from);

  inline PbLogEntry& operator=(const PbLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbLogEntry(PbLogEntry&& from) noexcept
    : PbLogEntry() {
    *this = ::std::move(from);
  }

  inline PbLogEntry& operator=(PbLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbLogEntry* internal_default_instance() {
    return reinterpret_cast<const PbLogEntry*>(
               &_PbLogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(PbLogEntry* other);
  friend void swap(PbLogEntry& a, PbLogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbLogEntry* New() const final {
    return CreateMaybeMessage<PbLogEntry>(NULL);
  }

  PbLogEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PbLogEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PbLogEntry& from);
  void MergeFrom(const PbLogEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbLogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string opName = 2;
  void clear_opname();
  static const int kOpNameFieldNumber = 2;
  const ::std::string& opname() const;
  void set_opname(const ::std::string& value);
  #if LANG_CXX11
  void set_opname(::std::string&& value);
  #endif
  void set_opname(const char* value);
  void set_opname(const char* value, size_t size);
  ::std::string* mutable_opname();
  ::std::string* release_opname();
  void set_allocated_opname(::std::string* opname);

  // string args = 3;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 prmIdx = 4;
  void clear_prmidx();
  static const int kPrmIdxFieldNumber = 4;
  ::google::protobuf::uint64 prmidx() const;
  void set_prmidx(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.raft.rpc.PbLogEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr opname_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prmidx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PbAppendEntriesMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.raft.rpc.PbAppendEntriesMessage) */ {
 public:
  PbAppendEntriesMessage();
  virtual ~PbAppendEntriesMessage();

  PbAppendEntriesMessage(const PbAppendEntriesMessage& from);

  inline PbAppendEntriesMessage& operator=(const PbAppendEntriesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbAppendEntriesMessage(PbAppendEntriesMessage&& from) noexcept
    : PbAppendEntriesMessage() {
    *this = ::std::move(from);
  }

  inline PbAppendEntriesMessage& operator=(PbAppendEntriesMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbAppendEntriesMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbAppendEntriesMessage* internal_default_instance() {
    return reinterpret_cast<const PbAppendEntriesMessage*>(
               &_PbAppendEntriesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(PbAppendEntriesMessage* other);
  friend void swap(PbAppendEntriesMessage& a, PbAppendEntriesMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbAppendEntriesMessage* New() const final {
    return CreateMaybeMessage<PbAppendEntriesMessage>(NULL);
  }

  PbAppendEntriesMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PbAppendEntriesMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PbAppendEntriesMessage& from);
  void MergeFrom(const PbAppendEntriesMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbAppendEntriesMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .quintet.raft.rpc.PbLogEntry logEntries = 5;
  int logentries_size() const;
  void clear_logentries();
  static const int kLogEntriesFieldNumber = 5;
  ::quintet::raft::rpc::PbLogEntry* mutable_logentries(int index);
  ::google::protobuf::RepeatedPtrField< ::quintet::raft::rpc::PbLogEntry >*
      mutable_logentries();
  const ::quintet::raft::rpc::PbLogEntry& logentries(int index) const;
  ::quintet::raft::rpc::PbLogEntry* add_logentries();
  const ::google::protobuf::RepeatedPtrField< ::quintet::raft::rpc::PbLogEntry >&
      logentries() const;

  // string leaderId = 2;
  void clear_leaderid();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leaderid() const;
  void set_leaderid(const ::std::string& value);
  #if LANG_CXX11
  void set_leaderid(::std::string&& value);
  #endif
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  ::std::string* mutable_leaderid();
  ::std::string* release_leaderid();
  void set_allocated_leaderid(::std::string* leaderid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 prevLogIdx = 3;
  void clear_prevlogidx();
  static const int kPrevLogIdxFieldNumber = 3;
  ::google::protobuf::uint64 prevlogidx() const;
  void set_prevlogidx(::google::protobuf::uint64 value);

  // uint64 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::uint64 prevlogterm() const;
  void set_prevlogterm(::google::protobuf::uint64 value);

  // uint64 commitIdx = 6;
  void clear_commitidx();
  static const int kCommitIdxFieldNumber = 6;
  ::google::protobuf::uint64 commitidx() const;
  void set_commitidx(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.raft.rpc.PbAppendEntriesMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::quintet::raft::rpc::PbLogEntry > logentries_;
  ::google::protobuf::internal::ArenaStringPtr leaderid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prevlogidx_;
  ::google::protobuf::uint64 prevlogterm_;
  ::google::protobuf::uint64 commitidx_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PbRequestVoteMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.raft.rpc.PbRequestVoteMessage) */ {
 public:
  PbRequestVoteMessage();
  virtual ~PbRequestVoteMessage();

  PbRequestVoteMessage(const PbRequestVoteMessage& from);

  inline PbRequestVoteMessage& operator=(const PbRequestVoteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbRequestVoteMessage(PbRequestVoteMessage&& from) noexcept
    : PbRequestVoteMessage() {
    *this = ::std::move(from);
  }

  inline PbRequestVoteMessage& operator=(PbRequestVoteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbRequestVoteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbRequestVoteMessage* internal_default_instance() {
    return reinterpret_cast<const PbRequestVoteMessage*>(
               &_PbRequestVoteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(PbRequestVoteMessage* other);
  friend void swap(PbRequestVoteMessage& a, PbRequestVoteMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbRequestVoteMessage* New() const final {
    return CreateMaybeMessage<PbRequestVoteMessage>(NULL);
  }

  PbRequestVoteMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PbRequestVoteMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PbRequestVoteMessage& from);
  void MergeFrom(const PbRequestVoteMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PbRequestVoteMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string candidateId = 2;
  void clear_candidateid();
  static const int kCandidateIdFieldNumber = 2;
  const ::std::string& candidateid() const;
  void set_candidateid(const ::std::string& value);
  #if LANG_CXX11
  void set_candidateid(::std::string&& value);
  #endif
  void set_candidateid(const char* value);
  void set_candidateid(const char* value, size_t size);
  ::std::string* mutable_candidateid();
  ::std::string* release_candidateid();
  void set_allocated_candidateid(::std::string* candidateid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 lastLogIdx = 3;
  void clear_lastlogidx();
  static const int kLastLogIdxFieldNumber = 3;
  ::google::protobuf::uint64 lastlogidx() const;
  void set_lastlogidx(::google::protobuf::uint64 value);

  // uint64 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::uint64 lastlogterm() const;
  void set_lastlogterm(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.raft.rpc.PbRequestVoteMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr candidateid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 lastlogidx_;
  ::google::protobuf::uint64 lastlogterm_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_raft_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbReply

// uint64 term = 1;
inline void PbReply::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbReply::term() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbReply.term)
  return term_;
}
inline void PbReply::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbReply.term)
}

// bool ans = 2;
inline void PbReply::clear_ans() {
  ans_ = false;
}
inline bool PbReply::ans() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbReply.ans)
  return ans_;
}
inline void PbReply::set_ans(bool value) {
  
  ans_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbReply.ans)
}

// -------------------------------------------------------------------

// PbLogEntry

// uint64 term = 1;
inline void PbLogEntry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbLogEntry::term() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbLogEntry.term)
  return term_;
}
inline void PbLogEntry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbLogEntry.term)
}

// string opName = 2;
inline void PbLogEntry::clear_opname() {
  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbLogEntry::opname() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbLogEntry.opName)
  return opname_.GetNoArena();
}
inline void PbLogEntry::set_opname(const ::std::string& value) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbLogEntry.opName)
}
#if LANG_CXX11
inline void PbLogEntry::set_opname(::std::string&& value) {
  
  opname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.raft.rpc.PbLogEntry.opName)
}
#endif
inline void PbLogEntry::set_opname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.raft.rpc.PbLogEntry.opName)
}
inline void PbLogEntry::set_opname(const char* value, size_t size) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.raft.rpc.PbLogEntry.opName)
}
inline ::std::string* PbLogEntry::mutable_opname() {
  
  // @@protoc_insertion_point(field_mutable:quintet.raft.rpc.PbLogEntry.opName)
  return opname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbLogEntry::release_opname() {
  // @@protoc_insertion_point(field_release:quintet.raft.rpc.PbLogEntry.opName)
  
  return opname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbLogEntry::set_allocated_opname(::std::string* opname) {
  if (opname != NULL) {
    
  } else {
    
  }
  opname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opname);
  // @@protoc_insertion_point(field_set_allocated:quintet.raft.rpc.PbLogEntry.opName)
}

// string args = 3;
inline void PbLogEntry::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbLogEntry::args() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbLogEntry.args)
  return args_.GetNoArena();
}
inline void PbLogEntry::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbLogEntry.args)
}
#if LANG_CXX11
inline void PbLogEntry::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.raft.rpc.PbLogEntry.args)
}
#endif
inline void PbLogEntry::set_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.raft.rpc.PbLogEntry.args)
}
inline void PbLogEntry::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.raft.rpc.PbLogEntry.args)
}
inline ::std::string* PbLogEntry::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:quintet.raft.rpc.PbLogEntry.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbLogEntry::release_args() {
  // @@protoc_insertion_point(field_release:quintet.raft.rpc.PbLogEntry.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbLogEntry::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:quintet.raft.rpc.PbLogEntry.args)
}

// uint64 prmIdx = 4;
inline void PbLogEntry::clear_prmidx() {
  prmidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbLogEntry::prmidx() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbLogEntry.prmIdx)
  return prmidx_;
}
inline void PbLogEntry::set_prmidx(::google::protobuf::uint64 value) {
  
  prmidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbLogEntry.prmIdx)
}

// -------------------------------------------------------------------

// PbAppendEntriesMessage

// uint64 term = 1;
inline void PbAppendEntriesMessage::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbAppendEntriesMessage::term() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbAppendEntriesMessage.term)
  return term_;
}
inline void PbAppendEntriesMessage::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbAppendEntriesMessage.term)
}

// string leaderId = 2;
inline void PbAppendEntriesMessage::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbAppendEntriesMessage::leaderid() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
  return leaderid_.GetNoArena();
}
inline void PbAppendEntriesMessage::set_leaderid(const ::std::string& value) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
}
#if LANG_CXX11
inline void PbAppendEntriesMessage::set_leaderid(::std::string&& value) {
  
  leaderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
}
#endif
inline void PbAppendEntriesMessage::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
}
inline void PbAppendEntriesMessage::set_leaderid(const char* value, size_t size) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
}
inline ::std::string* PbAppendEntriesMessage::mutable_leaderid() {
  
  // @@protoc_insertion_point(field_mutable:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
  return leaderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbAppendEntriesMessage::release_leaderid() {
  // @@protoc_insertion_point(field_release:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
  
  return leaderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbAppendEntriesMessage::set_allocated_leaderid(::std::string* leaderid) {
  if (leaderid != NULL) {
    
  } else {
    
  }
  leaderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:quintet.raft.rpc.PbAppendEntriesMessage.leaderId)
}

// uint64 prevLogIdx = 3;
inline void PbAppendEntriesMessage::clear_prevlogidx() {
  prevlogidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbAppendEntriesMessage::prevlogidx() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbAppendEntriesMessage.prevLogIdx)
  return prevlogidx_;
}
inline void PbAppendEntriesMessage::set_prevlogidx(::google::protobuf::uint64 value) {
  
  prevlogidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbAppendEntriesMessage.prevLogIdx)
}

// uint64 prevLogTerm = 4;
inline void PbAppendEntriesMessage::clear_prevlogterm() {
  prevlogterm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbAppendEntriesMessage::prevlogterm() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbAppendEntriesMessage.prevLogTerm)
  return prevlogterm_;
}
inline void PbAppendEntriesMessage::set_prevlogterm(::google::protobuf::uint64 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbAppendEntriesMessage.prevLogTerm)
}

// repeated .quintet.raft.rpc.PbLogEntry logEntries = 5;
inline int PbAppendEntriesMessage::logentries_size() const {
  return logentries_.size();
}
inline void PbAppendEntriesMessage::clear_logentries() {
  logentries_.Clear();
}
inline ::quintet::raft::rpc::PbLogEntry* PbAppendEntriesMessage::mutable_logentries(int index) {
  // @@protoc_insertion_point(field_mutable:quintet.raft.rpc.PbAppendEntriesMessage.logEntries)
  return logentries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quintet::raft::rpc::PbLogEntry >*
PbAppendEntriesMessage::mutable_logentries() {
  // @@protoc_insertion_point(field_mutable_list:quintet.raft.rpc.PbAppendEntriesMessage.logEntries)
  return &logentries_;
}
inline const ::quintet::raft::rpc::PbLogEntry& PbAppendEntriesMessage::logentries(int index) const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbAppendEntriesMessage.logEntries)
  return logentries_.Get(index);
}
inline ::quintet::raft::rpc::PbLogEntry* PbAppendEntriesMessage::add_logentries() {
  // @@protoc_insertion_point(field_add:quintet.raft.rpc.PbAppendEntriesMessage.logEntries)
  return logentries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quintet::raft::rpc::PbLogEntry >&
PbAppendEntriesMessage::logentries() const {
  // @@protoc_insertion_point(field_list:quintet.raft.rpc.PbAppendEntriesMessage.logEntries)
  return logentries_;
}

// uint64 commitIdx = 6;
inline void PbAppendEntriesMessage::clear_commitidx() {
  commitidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbAppendEntriesMessage::commitidx() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbAppendEntriesMessage.commitIdx)
  return commitidx_;
}
inline void PbAppendEntriesMessage::set_commitidx(::google::protobuf::uint64 value) {
  
  commitidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbAppendEntriesMessage.commitIdx)
}

// -------------------------------------------------------------------

// PbRequestVoteMessage

// uint64 term = 1;
inline void PbRequestVoteMessage::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbRequestVoteMessage::term() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbRequestVoteMessage.term)
  return term_;
}
inline void PbRequestVoteMessage::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbRequestVoteMessage.term)
}

// string candidateId = 2;
inline void PbRequestVoteMessage::clear_candidateid() {
  candidateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbRequestVoteMessage::candidateid() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
  return candidateid_.GetNoArena();
}
inline void PbRequestVoteMessage::set_candidateid(const ::std::string& value) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
}
#if LANG_CXX11
inline void PbRequestVoteMessage::set_candidateid(::std::string&& value) {
  
  candidateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
}
#endif
inline void PbRequestVoteMessage::set_candidateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
}
inline void PbRequestVoteMessage::set_candidateid(const char* value, size_t size) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
}
inline ::std::string* PbRequestVoteMessage::mutable_candidateid() {
  
  // @@protoc_insertion_point(field_mutable:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
  return candidateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbRequestVoteMessage::release_candidateid() {
  // @@protoc_insertion_point(field_release:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
  
  return candidateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbRequestVoteMessage::set_allocated_candidateid(::std::string* candidateid) {
  if (candidateid != NULL) {
    
  } else {
    
  }
  candidateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidateid);
  // @@protoc_insertion_point(field_set_allocated:quintet.raft.rpc.PbRequestVoteMessage.candidateId)
}

// uint64 lastLogIdx = 3;
inline void PbRequestVoteMessage::clear_lastlogidx() {
  lastlogidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbRequestVoteMessage::lastlogidx() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbRequestVoteMessage.lastLogIdx)
  return lastlogidx_;
}
inline void PbRequestVoteMessage::set_lastlogidx(::google::protobuf::uint64 value) {
  
  lastlogidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbRequestVoteMessage.lastLogIdx)
}

// uint64 lastLogTerm = 4;
inline void PbRequestVoteMessage::clear_lastlogterm() {
  lastlogterm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbRequestVoteMessage::lastlogterm() const {
  // @@protoc_insertion_point(field_get:quintet.raft.rpc.PbRequestVoteMessage.lastLogTerm)
  return lastlogterm_;
}
inline void PbRequestVoteMessage::set_lastlogterm(::google::protobuf::uint64 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:quintet.raft.rpc.PbRequestVoteMessage.lastLogTerm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace raft
}  // namespace quintet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_raft_2eproto
