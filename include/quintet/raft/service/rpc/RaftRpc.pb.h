// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RaftRpc.proto

#ifndef PROTOBUF_RaftRpc_2eproto__INCLUDED
#define PROTOBUF_RaftRpc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_RaftRpc_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsPbReplyImpl();
void InitDefaultsPbReply();
void InitDefaultsPbServerIdImpl();
void InitDefaultsPbServerId();
void InitDefaultsPbLogEntryImpl();
void InitDefaultsPbLogEntry();
void InitDefaultsAppendEntriesMessageImpl();
void InitDefaultsAppendEntriesMessage();
void InitDefaultsRequestVoteMessageImpl();
void InitDefaultsRequestVoteMessage();
inline void InitDefaults() {
  InitDefaultsPbReply();
  InitDefaultsPbServerId();
  InitDefaultsPbLogEntry();
  InitDefaultsAppendEntriesMessage();
  InitDefaultsRequestVoteMessage();
}
}  // namespace protobuf_RaftRpc_2eproto
namespace quintet {
namespace rpc {
class AppendEntriesMessage;
class AppendEntriesMessageDefaultTypeInternal;
extern AppendEntriesMessageDefaultTypeInternal _AppendEntriesMessage_default_instance_;
class PbLogEntry;
class PbLogEntryDefaultTypeInternal;
extern PbLogEntryDefaultTypeInternal _PbLogEntry_default_instance_;
class PbReply;
class PbReplyDefaultTypeInternal;
extern PbReplyDefaultTypeInternal _PbReply_default_instance_;
class PbServerId;
class PbServerIdDefaultTypeInternal;
extern PbServerIdDefaultTypeInternal _PbServerId_default_instance_;
class RequestVoteMessage;
class RequestVoteMessageDefaultTypeInternal;
extern RequestVoteMessageDefaultTypeInternal _RequestVoteMessage_default_instance_;
}  // namespace rpc
}  // namespace quintet
namespace quintet {
namespace rpc {

enum PbAnswer {
  Invalid = 0,
  True = 1,
  False = 2,
  PbAnswer_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PbAnswer_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PbAnswer_IsValid(int value);
const PbAnswer PbAnswer_MIN = Invalid;
const PbAnswer PbAnswer_MAX = False;
const int PbAnswer_ARRAYSIZE = PbAnswer_MAX + 1;

const ::google::protobuf::EnumDescriptor* PbAnswer_descriptor();
inline const ::std::string& PbAnswer_Name(PbAnswer value) {
  return ::google::protobuf::internal::NameOfEnum(
    PbAnswer_descriptor(), value);
}
inline bool PbAnswer_Parse(
    const ::std::string& name, PbAnswer* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PbAnswer>(
    PbAnswer_descriptor(), name, value);
}
// ===================================================================

class PbReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.PbReply) */ {
 public:
  PbReply();
  virtual ~PbReply();

  PbReply(const PbReply& from);

  inline PbReply& operator=(const PbReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbReply(PbReply&& from) noexcept
    : PbReply() {
    *this = ::std::move(from);
  }

  inline PbReply& operator=(PbReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbReply* internal_default_instance() {
    return reinterpret_cast<const PbReply*>(
               &_PbReply_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PbReply* other);
  friend void swap(PbReply& a, PbReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbReply* New() const PROTOBUF_FINAL { return New(NULL); }

  PbReply* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PbReply& from);
  void MergeFrom(const PbReply& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PbReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // .quintet.rpc.PbAnswer ans = 2;
  void clear_ans();
  static const int kAnsFieldNumber = 2;
  ::quintet::rpc::PbAnswer ans() const;
  void set_ans(::quintet::rpc::PbAnswer value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.PbReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  int ans_;
  mutable int _cached_size_;
  friend struct ::protobuf_RaftRpc_2eproto::TableStruct;
  friend void ::protobuf_RaftRpc_2eproto::InitDefaultsPbReplyImpl();
};
// -------------------------------------------------------------------

class PbServerId : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.PbServerId) */ {
 public:
  PbServerId();
  virtual ~PbServerId();

  PbServerId(const PbServerId& from);

  inline PbServerId& operator=(const PbServerId& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbServerId(PbServerId&& from) noexcept
    : PbServerId() {
    *this = ::std::move(from);
  }

  inline PbServerId& operator=(PbServerId&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbServerId& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbServerId* internal_default_instance() {
    return reinterpret_cast<const PbServerId*>(
               &_PbServerId_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PbServerId* other);
  friend void swap(PbServerId& a, PbServerId& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbServerId* New() const PROTOBUF_FINAL { return New(NULL); }

  PbServerId* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PbServerId& from);
  void MergeFrom(const PbServerId& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PbServerId* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string addr = 1;
  void clear_addr();
  static const int kAddrFieldNumber = 1;
  const ::std::string& addr() const;
  void set_addr(const ::std::string& value);
  #if LANG_CXX11
  void set_addr(::std::string&& value);
  #endif
  void set_addr(const char* value);
  void set_addr(const char* value, size_t size);
  ::std::string* mutable_addr();
  ::std::string* release_addr();
  void set_allocated_addr(::std::string* addr);

  // uint32 port = 2;
  void clear_port();
  static const int kPortFieldNumber = 2;
  ::google::protobuf::uint32 port() const;
  void set_port(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.PbServerId)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr addr_;
  ::google::protobuf::uint32 port_;
  mutable int _cached_size_;
  friend struct ::protobuf_RaftRpc_2eproto::TableStruct;
  friend void ::protobuf_RaftRpc_2eproto::InitDefaultsPbServerIdImpl();
};
// -------------------------------------------------------------------

class PbLogEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.PbLogEntry) */ {
 public:
  PbLogEntry();
  virtual ~PbLogEntry();

  PbLogEntry(const PbLogEntry& from);

  inline PbLogEntry& operator=(const PbLogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PbLogEntry(PbLogEntry&& from) noexcept
    : PbLogEntry() {
    *this = ::std::move(from);
  }

  inline PbLogEntry& operator=(PbLogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PbLogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PbLogEntry* internal_default_instance() {
    return reinterpret_cast<const PbLogEntry*>(
               &_PbLogEntry_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PbLogEntry* other);
  friend void swap(PbLogEntry& a, PbLogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PbLogEntry* New() const PROTOBUF_FINAL { return New(NULL); }

  PbLogEntry* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PbLogEntry& from);
  void MergeFrom(const PbLogEntry& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PbLogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string opName = 2;
  void clear_opname();
  static const int kOpNameFieldNumber = 2;
  const ::std::string& opname() const;
  void set_opname(const ::std::string& value);
  #if LANG_CXX11
  void set_opname(::std::string&& value);
  #endif
  void set_opname(const char* value);
  void set_opname(const char* value, size_t size);
  ::std::string* mutable_opname();
  ::std::string* release_opname();
  void set_allocated_opname(::std::string* opname);

  // string args = 3;
  void clear_args();
  static const int kArgsFieldNumber = 3;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 prmIdx = 4;
  void clear_prmidx();
  static const int kPrmIdxFieldNumber = 4;
  ::google::protobuf::uint64 prmidx() const;
  void set_prmidx(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.PbLogEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr opname_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prmidx_;
  mutable int _cached_size_;
  friend struct ::protobuf_RaftRpc_2eproto::TableStruct;
  friend void ::protobuf_RaftRpc_2eproto::InitDefaultsPbLogEntryImpl();
};
// -------------------------------------------------------------------

class AppendEntriesMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.AppendEntriesMessage) */ {
 public:
  AppendEntriesMessage();
  virtual ~AppendEntriesMessage();

  AppendEntriesMessage(const AppendEntriesMessage& from);

  inline AppendEntriesMessage& operator=(const AppendEntriesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesMessage(AppendEntriesMessage&& from) noexcept
    : AppendEntriesMessage() {
    *this = ::std::move(from);
  }

  inline AppendEntriesMessage& operator=(AppendEntriesMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesMessage* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesMessage*>(
               &_AppendEntriesMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(AppendEntriesMessage* other);
  friend void swap(AppendEntriesMessage& a, AppendEntriesMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  AppendEntriesMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const AppendEntriesMessage& from);
  void MergeFrom(const AppendEntriesMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(AppendEntriesMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .quintet.rpc.PbLogEntry logEntries = 5;
  int logentries_size() const;
  void clear_logentries();
  static const int kLogEntriesFieldNumber = 5;
  const ::quintet::rpc::PbLogEntry& logentries(int index) const;
  ::quintet::rpc::PbLogEntry* mutable_logentries(int index);
  ::quintet::rpc::PbLogEntry* add_logentries();
  ::google::protobuf::RepeatedPtrField< ::quintet::rpc::PbLogEntry >*
      mutable_logentries();
  const ::google::protobuf::RepeatedPtrField< ::quintet::rpc::PbLogEntry >&
      logentries() const;

  // .quintet.rpc.PbServerId leaderId = 2;
  bool has_leaderid() const;
  void clear_leaderid();
  static const int kLeaderIdFieldNumber = 2;
  const ::quintet::rpc::PbServerId& leaderid() const;
  ::quintet::rpc::PbServerId* release_leaderid();
  ::quintet::rpc::PbServerId* mutable_leaderid();
  void set_allocated_leaderid(::quintet::rpc::PbServerId* leaderid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 prevLogIdx = 3;
  void clear_prevlogidx();
  static const int kPrevLogIdxFieldNumber = 3;
  ::google::protobuf::uint64 prevlogidx() const;
  void set_prevlogidx(::google::protobuf::uint64 value);

  // uint64 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::uint64 prevlogterm() const;
  void set_prevlogterm(::google::protobuf::uint64 value);

  // uint64 commitIdx = 6;
  void clear_commitidx();
  static const int kCommitIdxFieldNumber = 6;
  ::google::protobuf::uint64 commitidx() const;
  void set_commitidx(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.AppendEntriesMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::quintet::rpc::PbLogEntry > logentries_;
  ::quintet::rpc::PbServerId* leaderid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prevlogidx_;
  ::google::protobuf::uint64 prevlogterm_;
  ::google::protobuf::uint64 commitidx_;
  mutable int _cached_size_;
  friend struct ::protobuf_RaftRpc_2eproto::TableStruct;
  friend void ::protobuf_RaftRpc_2eproto::InitDefaultsAppendEntriesMessageImpl();
};
// -------------------------------------------------------------------

class RequestVoteMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.RequestVoteMessage) */ {
 public:
  RequestVoteMessage();
  virtual ~RequestVoteMessage();

  RequestVoteMessage(const RequestVoteMessage& from);

  inline RequestVoteMessage& operator=(const RequestVoteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteMessage(RequestVoteMessage&& from) noexcept
    : RequestVoteMessage() {
    *this = ::std::move(from);
  }

  inline RequestVoteMessage& operator=(RequestVoteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteMessage* internal_default_instance() {
    return reinterpret_cast<const RequestVoteMessage*>(
               &_RequestVoteMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(RequestVoteMessage* other);
  friend void swap(RequestVoteMessage& a, RequestVoteMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  RequestVoteMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RequestVoteMessage& from);
  void MergeFrom(const RequestVoteMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RequestVoteMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .quintet.rpc.PbServerId candidateId = 2;
  bool has_candidateid() const;
  void clear_candidateid();
  static const int kCandidateIdFieldNumber = 2;
  const ::quintet::rpc::PbServerId& candidateid() const;
  ::quintet::rpc::PbServerId* release_candidateid();
  ::quintet::rpc::PbServerId* mutable_candidateid();
  void set_allocated_candidateid(::quintet::rpc::PbServerId* candidateid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 lastLogIdx = 3;
  void clear_lastlogidx();
  static const int kLastLogIdxFieldNumber = 3;
  ::google::protobuf::uint64 lastlogidx() const;
  void set_lastlogidx(::google::protobuf::uint64 value);

  // uint64 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::uint64 lastlogterm() const;
  void set_lastlogterm(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.RequestVoteMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::quintet::rpc::PbServerId* candidateid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 lastlogidx_;
  ::google::protobuf::uint64 lastlogterm_;
  mutable int _cached_size_;
  friend struct ::protobuf_RaftRpc_2eproto::TableStruct;
  friend void ::protobuf_RaftRpc_2eproto::InitDefaultsRequestVoteMessageImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PbReply

// uint64 term = 1;
inline void PbReply::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbReply::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbReply.term)
  return term_;
}
inline void PbReply::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.PbReply.term)
}

// .quintet.rpc.PbAnswer ans = 2;
inline void PbReply::clear_ans() {
  ans_ = 0;
}
inline ::quintet::rpc::PbAnswer PbReply::ans() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbReply.ans)
  return static_cast< ::quintet::rpc::PbAnswer >(ans_);
}
inline void PbReply::set_ans(::quintet::rpc::PbAnswer value) {
  
  ans_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.PbReply.ans)
}

// -------------------------------------------------------------------

// PbServerId

// string addr = 1;
inline void PbServerId::clear_addr() {
  addr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbServerId::addr() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbServerId.addr)
  return addr_.GetNoArena();
}
inline void PbServerId::set_addr(const ::std::string& value) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.PbServerId.addr)
}
#if LANG_CXX11
inline void PbServerId::set_addr(::std::string&& value) {
  
  addr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.PbServerId.addr)
}
#endif
inline void PbServerId::set_addr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.PbServerId.addr)
}
inline void PbServerId::set_addr(const char* value, size_t size) {
  
  addr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.PbServerId.addr)
}
inline ::std::string* PbServerId::mutable_addr() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.PbServerId.addr)
  return addr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbServerId::release_addr() {
  // @@protoc_insertion_point(field_release:quintet.rpc.PbServerId.addr)
  
  return addr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbServerId::set_allocated_addr(::std::string* addr) {
  if (addr != NULL) {
    
  } else {
    
  }
  addr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), addr);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.PbServerId.addr)
}

// uint32 port = 2;
inline void PbServerId::clear_port() {
  port_ = 0u;
}
inline ::google::protobuf::uint32 PbServerId::port() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbServerId.port)
  return port_;
}
inline void PbServerId::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.PbServerId.port)
}

// -------------------------------------------------------------------

// PbLogEntry

// uint64 term = 1;
inline void PbLogEntry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbLogEntry::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbLogEntry.term)
  return term_;
}
inline void PbLogEntry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.PbLogEntry.term)
}

// string opName = 2;
inline void PbLogEntry::clear_opname() {
  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbLogEntry::opname() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbLogEntry.opName)
  return opname_.GetNoArena();
}
inline void PbLogEntry::set_opname(const ::std::string& value) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.PbLogEntry.opName)
}
#if LANG_CXX11
inline void PbLogEntry::set_opname(::std::string&& value) {
  
  opname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.PbLogEntry.opName)
}
#endif
inline void PbLogEntry::set_opname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.PbLogEntry.opName)
}
inline void PbLogEntry::set_opname(const char* value, size_t size) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.PbLogEntry.opName)
}
inline ::std::string* PbLogEntry::mutable_opname() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.PbLogEntry.opName)
  return opname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbLogEntry::release_opname() {
  // @@protoc_insertion_point(field_release:quintet.rpc.PbLogEntry.opName)
  
  return opname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbLogEntry::set_allocated_opname(::std::string* opname) {
  if (opname != NULL) {
    
  } else {
    
  }
  opname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opname);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.PbLogEntry.opName)
}

// string args = 3;
inline void PbLogEntry::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PbLogEntry::args() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbLogEntry.args)
  return args_.GetNoArena();
}
inline void PbLogEntry::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.PbLogEntry.args)
}
#if LANG_CXX11
inline void PbLogEntry::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.PbLogEntry.args)
}
#endif
inline void PbLogEntry::set_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.PbLogEntry.args)
}
inline void PbLogEntry::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.PbLogEntry.args)
}
inline ::std::string* PbLogEntry::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.PbLogEntry.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PbLogEntry::release_args() {
  // @@protoc_insertion_point(field_release:quintet.rpc.PbLogEntry.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PbLogEntry::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.PbLogEntry.args)
}

// uint64 prmIdx = 4;
inline void PbLogEntry::clear_prmidx() {
  prmidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 PbLogEntry::prmidx() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.PbLogEntry.prmIdx)
  return prmidx_;
}
inline void PbLogEntry::set_prmidx(::google::protobuf::uint64 value) {
  
  prmidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.PbLogEntry.prmIdx)
}

// -------------------------------------------------------------------

// AppendEntriesMessage

// uint64 term = 1;
inline void AppendEntriesMessage::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.term)
  return term_;
}
inline void AppendEntriesMessage::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.term)
}

// .quintet.rpc.PbServerId leaderId = 2;
inline bool AppendEntriesMessage::has_leaderid() const {
  return this != internal_default_instance() && leaderid_ != NULL;
}
inline void AppendEntriesMessage::clear_leaderid() {
  if (GetArenaNoVirtual() == NULL && leaderid_ != NULL) {
    delete leaderid_;
  }
  leaderid_ = NULL;
}
inline const ::quintet::rpc::PbServerId& AppendEntriesMessage::leaderid() const {
  const ::quintet::rpc::PbServerId* p = leaderid_;
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.leaderId)
  return p != NULL ? *p : *reinterpret_cast<const ::quintet::rpc::PbServerId*>(
      &::quintet::rpc::_PbServerId_default_instance_);
}
inline ::quintet::rpc::PbServerId* AppendEntriesMessage::release_leaderid() {
  // @@protoc_insertion_point(field_release:quintet.rpc.AppendEntriesMessage.leaderId)
  
  ::quintet::rpc::PbServerId* temp = leaderid_;
  leaderid_ = NULL;
  return temp;
}
inline ::quintet::rpc::PbServerId* AppendEntriesMessage::mutable_leaderid() {
  
  if (leaderid_ == NULL) {
    leaderid_ = new ::quintet::rpc::PbServerId;
  }
  // @@protoc_insertion_point(field_mutable:quintet.rpc.AppendEntriesMessage.leaderId)
  return leaderid_;
}
inline void AppendEntriesMessage::set_allocated_leaderid(::quintet::rpc::PbServerId* leaderid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete leaderid_;
  }
  if (leaderid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      leaderid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, leaderid, submessage_arena);
    }
    
  } else {
    
  }
  leaderid_ = leaderid;
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.AppendEntriesMessage.leaderId)
}

// uint64 prevLogIdx = 3;
inline void AppendEntriesMessage::clear_prevlogidx() {
  prevlogidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::prevlogidx() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.prevLogIdx)
  return prevlogidx_;
}
inline void AppendEntriesMessage::set_prevlogidx(::google::protobuf::uint64 value) {
  
  prevlogidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.prevLogIdx)
}

// uint64 prevLogTerm = 4;
inline void AppendEntriesMessage::clear_prevlogterm() {
  prevlogterm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::prevlogterm() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.prevLogTerm)
  return prevlogterm_;
}
inline void AppendEntriesMessage::set_prevlogterm(::google::protobuf::uint64 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.prevLogTerm)
}

// repeated .quintet.rpc.PbLogEntry logEntries = 5;
inline int AppendEntriesMessage::logentries_size() const {
  return logentries_.size();
}
inline void AppendEntriesMessage::clear_logentries() {
  logentries_.Clear();
}
inline const ::quintet::rpc::PbLogEntry& AppendEntriesMessage::logentries(int index) const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.logEntries)
  return logentries_.Get(index);
}
inline ::quintet::rpc::PbLogEntry* AppendEntriesMessage::mutable_logentries(int index) {
  // @@protoc_insertion_point(field_mutable:quintet.rpc.AppendEntriesMessage.logEntries)
  return logentries_.Mutable(index);
}
inline ::quintet::rpc::PbLogEntry* AppendEntriesMessage::add_logentries() {
  // @@protoc_insertion_point(field_add:quintet.rpc.AppendEntriesMessage.logEntries)
  return logentries_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::quintet::rpc::PbLogEntry >*
AppendEntriesMessage::mutable_logentries() {
  // @@protoc_insertion_point(field_mutable_list:quintet.rpc.AppendEntriesMessage.logEntries)
  return &logentries_;
}
inline const ::google::protobuf::RepeatedPtrField< ::quintet::rpc::PbLogEntry >&
AppendEntriesMessage::logentries() const {
  // @@protoc_insertion_point(field_list:quintet.rpc.AppendEntriesMessage.logEntries)
  return logentries_;
}

// uint64 commitIdx = 6;
inline void AppendEntriesMessage::clear_commitidx() {
  commitidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::commitidx() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.commitIdx)
  return commitidx_;
}
inline void AppendEntriesMessage::set_commitidx(::google::protobuf::uint64 value) {
  
  commitidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.commitIdx)
}

// -------------------------------------------------------------------

// RequestVoteMessage

// uint64 term = 1;
inline void RequestVoteMessage::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteMessage::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.term)
  return term_;
}
inline void RequestVoteMessage::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.term)
}

// .quintet.rpc.PbServerId candidateId = 2;
inline bool RequestVoteMessage::has_candidateid() const {
  return this != internal_default_instance() && candidateid_ != NULL;
}
inline void RequestVoteMessage::clear_candidateid() {
  if (GetArenaNoVirtual() == NULL && candidateid_ != NULL) {
    delete candidateid_;
  }
  candidateid_ = NULL;
}
inline const ::quintet::rpc::PbServerId& RequestVoteMessage::candidateid() const {
  const ::quintet::rpc::PbServerId* p = candidateid_;
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.candidateId)
  return p != NULL ? *p : *reinterpret_cast<const ::quintet::rpc::PbServerId*>(
      &::quintet::rpc::_PbServerId_default_instance_);
}
inline ::quintet::rpc::PbServerId* RequestVoteMessage::release_candidateid() {
  // @@protoc_insertion_point(field_release:quintet.rpc.RequestVoteMessage.candidateId)
  
  ::quintet::rpc::PbServerId* temp = candidateid_;
  candidateid_ = NULL;
  return temp;
}
inline ::quintet::rpc::PbServerId* RequestVoteMessage::mutable_candidateid() {
  
  if (candidateid_ == NULL) {
    candidateid_ = new ::quintet::rpc::PbServerId;
  }
  // @@protoc_insertion_point(field_mutable:quintet.rpc.RequestVoteMessage.candidateId)
  return candidateid_;
}
inline void RequestVoteMessage::set_allocated_candidateid(::quintet::rpc::PbServerId* candidateid) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete candidateid_;
  }
  if (candidateid) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      candidateid = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, candidateid, submessage_arena);
    }
    
  } else {
    
  }
  candidateid_ = candidateid;
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.RequestVoteMessage.candidateId)
}

// uint64 lastLogIdx = 3;
inline void RequestVoteMessage::clear_lastlogidx() {
  lastlogidx_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteMessage::lastlogidx() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.lastLogIdx)
  return lastlogidx_;
}
inline void RequestVoteMessage::set_lastlogidx(::google::protobuf::uint64 value) {
  
  lastlogidx_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.lastLogIdx)
}

// uint64 lastLogTerm = 4;
inline void RequestVoteMessage::clear_lastlogterm() {
  lastlogterm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteMessage::lastlogterm() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.lastLogTerm)
  return lastlogterm_;
}
inline void RequestVoteMessage::set_lastlogterm(::google::protobuf::uint64 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.lastLogTerm)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace quintet

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::quintet::rpc::PbAnswer> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quintet::rpc::PbAnswer>() {
  return ::quintet::rpc::PbAnswer_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_RaftRpc_2eproto__INCLUDED
