// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

#ifndef PROTOBUF_INCLUDED_internal_2eproto
#define PROTOBUF_INCLUDED_internal_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_internal_2eproto 

namespace protobuf_internal_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_internal_2eproto
namespace quintet {
namespace rpc {
class AppendEntriesMessage;
class AppendEntriesMessageDefaultTypeInternal;
extern AppendEntriesMessageDefaultTypeInternal _AppendEntriesMessage_default_instance_;
class AppendEntriesReply;
class AppendEntriesReplyDefaultTypeInternal;
extern AppendEntriesReplyDefaultTypeInternal _AppendEntriesReply_default_instance_;
class LogEntry;
class LogEntryDefaultTypeInternal;
extern LogEntryDefaultTypeInternal _LogEntry_default_instance_;
class RequestVoteMessage;
class RequestVoteMessageDefaultTypeInternal;
extern RequestVoteMessageDefaultTypeInternal _RequestVoteMessage_default_instance_;
class RequestVoteReply;
class RequestVoteReplyDefaultTypeInternal;
extern RequestVoteReplyDefaultTypeInternal _RequestVoteReply_default_instance_;
}  // namespace rpc
}  // namespace quintet
namespace google {
namespace protobuf {
template<> ::quintet::rpc::AppendEntriesMessage* Arena::CreateMaybeMessage<::quintet::rpc::AppendEntriesMessage>(Arena*);
template<> ::quintet::rpc::AppendEntriesReply* Arena::CreateMaybeMessage<::quintet::rpc::AppendEntriesReply>(Arena*);
template<> ::quintet::rpc::LogEntry* Arena::CreateMaybeMessage<::quintet::rpc::LogEntry>(Arena*);
template<> ::quintet::rpc::RequestVoteMessage* Arena::CreateMaybeMessage<::quintet::rpc::RequestVoteMessage>(Arena*);
template<> ::quintet::rpc::RequestVoteReply* Arena::CreateMaybeMessage<::quintet::rpc::RequestVoteReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace quintet {
namespace rpc {

// ===================================================================

class LogEntry : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.LogEntry) */ {
 public:
  LogEntry();
  virtual ~LogEntry();

  LogEntry(const LogEntry& from);

  inline LogEntry& operator=(const LogEntry& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LogEntry(LogEntry&& from) noexcept
    : LogEntry() {
    *this = ::std::move(from);
  }

  inline LogEntry& operator=(LogEntry&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const LogEntry& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogEntry* internal_default_instance() {
    return reinterpret_cast<const LogEntry*>(
               &_LogEntry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(LogEntry* other);
  friend void swap(LogEntry& a, LogEntry& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LogEntry* New() const final {
    return CreateMaybeMessage<LogEntry>(NULL);
  }

  LogEntry* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LogEntry>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LogEntry& from);
  void MergeFrom(const LogEntry& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogEntry* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string opName = 1;
  void clear_opname();
  static const int kOpNameFieldNumber = 1;
  const ::std::string& opname() const;
  void set_opname(const ::std::string& value);
  #if LANG_CXX11
  void set_opname(::std::string&& value);
  #endif
  void set_opname(const char* value);
  void set_opname(const char* value, size_t size);
  ::std::string* mutable_opname();
  ::std::string* release_opname();
  void set_allocated_opname(::std::string* opname);

  // string args = 2;
  void clear_args();
  static const int kArgsFieldNumber = 2;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // uint64 term = 3;
  void clear_term();
  static const int kTermFieldNumber = 3;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.LogEntry)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr opname_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::uint64 term_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppendEntriesMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.AppendEntriesMessage) */ {
 public:
  AppendEntriesMessage();
  virtual ~AppendEntriesMessage();

  AppendEntriesMessage(const AppendEntriesMessage& from);

  inline AppendEntriesMessage& operator=(const AppendEntriesMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesMessage(AppendEntriesMessage&& from) noexcept
    : AppendEntriesMessage() {
    *this = ::std::move(from);
  }

  inline AppendEntriesMessage& operator=(AppendEntriesMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesMessage* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesMessage*>(
               &_AppendEntriesMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AppendEntriesMessage* other);
  friend void swap(AppendEntriesMessage& a, AppendEntriesMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesMessage* New() const final {
    return CreateMaybeMessage<AppendEntriesMessage>(NULL);
  }

  AppendEntriesMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppendEntriesMessage& from);
  void MergeFrom(const AppendEntriesMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .quintet.rpc.LogEntry entries = 5;
  int entries_size() const;
  void clear_entries();
  static const int kEntriesFieldNumber = 5;
  ::quintet::rpc::LogEntry* mutable_entries(int index);
  ::google::protobuf::RepeatedPtrField< ::quintet::rpc::LogEntry >*
      mutable_entries();
  const ::quintet::rpc::LogEntry& entries(int index) const;
  ::quintet::rpc::LogEntry* add_entries();
  const ::google::protobuf::RepeatedPtrField< ::quintet::rpc::LogEntry >&
      entries() const;

  // string leaderId = 2;
  void clear_leaderid();
  static const int kLeaderIdFieldNumber = 2;
  const ::std::string& leaderid() const;
  void set_leaderid(const ::std::string& value);
  #if LANG_CXX11
  void set_leaderid(::std::string&& value);
  #endif
  void set_leaderid(const char* value);
  void set_leaderid(const char* value, size_t size);
  ::std::string* mutable_leaderid();
  ::std::string* release_leaderid();
  void set_allocated_leaderid(::std::string* leaderid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 prevLogIndex = 3;
  void clear_prevlogindex();
  static const int kPrevLogIndexFieldNumber = 3;
  ::google::protobuf::uint64 prevlogindex() const;
  void set_prevlogindex(::google::protobuf::uint64 value);

  // uint64 prevLogTerm = 4;
  void clear_prevlogterm();
  static const int kPrevLogTermFieldNumber = 4;
  ::google::protobuf::uint64 prevlogterm() const;
  void set_prevlogterm(::google::protobuf::uint64 value);

  // uint64 leaderCommit = 6;
  void clear_leadercommit();
  static const int kLeaderCommitFieldNumber = 6;
  ::google::protobuf::uint64 leadercommit() const;
  void set_leadercommit(::google::protobuf::uint64 value);

  // uint64 debugId = 9;
  void clear_debugid();
  static const int kDebugIdFieldNumber = 9;
  ::google::protobuf::uint64 debugid() const;
  void set_debugid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.AppendEntriesMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::quintet::rpc::LogEntry > entries_;
  ::google::protobuf::internal::ArenaStringPtr leaderid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 prevlogindex_;
  ::google::protobuf::uint64 prevlogterm_;
  ::google::protobuf::uint64 leadercommit_;
  ::google::protobuf::uint64 debugid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AppendEntriesReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.AppendEntriesReply) */ {
 public:
  AppendEntriesReply();
  virtual ~AppendEntriesReply();

  AppendEntriesReply(const AppendEntriesReply& from);

  inline AppendEntriesReply& operator=(const AppendEntriesReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AppendEntriesReply(AppendEntriesReply&& from) noexcept
    : AppendEntriesReply() {
    *this = ::std::move(from);
  }

  inline AppendEntriesReply& operator=(AppendEntriesReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const AppendEntriesReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AppendEntriesReply* internal_default_instance() {
    return reinterpret_cast<const AppendEntriesReply*>(
               &_AppendEntriesReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AppendEntriesReply* other);
  friend void swap(AppendEntriesReply& a, AppendEntriesReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AppendEntriesReply* New() const final {
    return CreateMaybeMessage<AppendEntriesReply>(NULL);
  }

  AppendEntriesReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AppendEntriesReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AppendEntriesReply& from);
  void MergeFrom(const AppendEntriesReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppendEntriesReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // bool success = 2;
  void clear_success();
  static const int kSuccessFieldNumber = 2;
  bool success() const;
  void set_success(bool value);

  // uint64 debugId = 9;
  void clear_debugid();
  static const int kDebugIdFieldNumber = 9;
  ::google::protobuf::uint64 debugid() const;
  void set_debugid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.AppendEntriesReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  bool success_;
  ::google::protobuf::uint64 debugid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestVoteMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.RequestVoteMessage) */ {
 public:
  RequestVoteMessage();
  virtual ~RequestVoteMessage();

  RequestVoteMessage(const RequestVoteMessage& from);

  inline RequestVoteMessage& operator=(const RequestVoteMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteMessage(RequestVoteMessage&& from) noexcept
    : RequestVoteMessage() {
    *this = ::std::move(from);
  }

  inline RequestVoteMessage& operator=(RequestVoteMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteMessage* internal_default_instance() {
    return reinterpret_cast<const RequestVoteMessage*>(
               &_RequestVoteMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(RequestVoteMessage* other);
  friend void swap(RequestVoteMessage& a, RequestVoteMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteMessage* New() const final {
    return CreateMaybeMessage<RequestVoteMessage>(NULL);
  }

  RequestVoteMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestVoteMessage& from);
  void MergeFrom(const RequestVoteMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string candidateId = 2;
  void clear_candidateid();
  static const int kCandidateIdFieldNumber = 2;
  const ::std::string& candidateid() const;
  void set_candidateid(const ::std::string& value);
  #if LANG_CXX11
  void set_candidateid(::std::string&& value);
  #endif
  void set_candidateid(const char* value);
  void set_candidateid(const char* value, size_t size);
  ::std::string* mutable_candidateid();
  ::std::string* release_candidateid();
  void set_allocated_candidateid(::std::string* candidateid);

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // uint64 lastLogIndex = 3;
  void clear_lastlogindex();
  static const int kLastLogIndexFieldNumber = 3;
  ::google::protobuf::uint64 lastlogindex() const;
  void set_lastlogindex(::google::protobuf::uint64 value);

  // uint64 lastLogTerm = 4;
  void clear_lastlogterm();
  static const int kLastLogTermFieldNumber = 4;
  ::google::protobuf::uint64 lastlogterm() const;
  void set_lastlogterm(::google::protobuf::uint64 value);

  // uint64 debugId = 9;
  void clear_debugid();
  static const int kDebugIdFieldNumber = 9;
  ::google::protobuf::uint64 debugid() const;
  void set_debugid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.RequestVoteMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr candidateid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 lastlogindex_;
  ::google::protobuf::uint64 lastlogterm_;
  ::google::protobuf::uint64 debugid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RequestVoteReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.RequestVoteReply) */ {
 public:
  RequestVoteReply();
  virtual ~RequestVoteReply();

  RequestVoteReply(const RequestVoteReply& from);

  inline RequestVoteReply& operator=(const RequestVoteReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RequestVoteReply(RequestVoteReply&& from) noexcept
    : RequestVoteReply() {
    *this = ::std::move(from);
  }

  inline RequestVoteReply& operator=(RequestVoteReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestVoteReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestVoteReply* internal_default_instance() {
    return reinterpret_cast<const RequestVoteReply*>(
               &_RequestVoteReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(RequestVoteReply* other);
  friend void swap(RequestVoteReply& a, RequestVoteReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RequestVoteReply* New() const final {
    return CreateMaybeMessage<RequestVoteReply>(NULL);
  }

  RequestVoteReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RequestVoteReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RequestVoteReply& from);
  void MergeFrom(const RequestVoteReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestVoteReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 term = 1;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // bool voteGranted = 2;
  void clear_votegranted();
  static const int kVoteGrantedFieldNumber = 2;
  bool votegranted() const;
  void set_votegranted(bool value);

  // uint64 debugId = 9;
  void clear_debugid();
  static const int kDebugIdFieldNumber = 9;
  ::google::protobuf::uint64 debugid() const;
  void set_debugid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.RequestVoteReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 term_;
  bool votegranted_;
  ::google::protobuf::uint64 debugid_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_internal_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogEntry

// string opName = 1;
inline void LogEntry::clear_opname() {
  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry::opname() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.LogEntry.opName)
  return opname_.GetNoArena();
}
inline void LogEntry::set_opname(const ::std::string& value) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.LogEntry.opName)
}
#if LANG_CXX11
inline void LogEntry::set_opname(::std::string&& value) {
  
  opname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.LogEntry.opName)
}
#endif
inline void LogEntry::set_opname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.LogEntry.opName)
}
inline void LogEntry::set_opname(const char* value, size_t size) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.LogEntry.opName)
}
inline ::std::string* LogEntry::mutable_opname() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.LogEntry.opName)
  return opname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry::release_opname() {
  // @@protoc_insertion_point(field_release:quintet.rpc.LogEntry.opName)
  
  return opname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_opname(::std::string* opname) {
  if (opname != NULL) {
    
  } else {
    
  }
  opname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opname);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.LogEntry.opName)
}

// string args = 2;
inline void LogEntry::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogEntry::args() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.LogEntry.args)
  return args_.GetNoArena();
}
inline void LogEntry::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.LogEntry.args)
}
#if LANG_CXX11
inline void LogEntry::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.LogEntry.args)
}
#endif
inline void LogEntry::set_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.LogEntry.args)
}
inline void LogEntry::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.LogEntry.args)
}
inline ::std::string* LogEntry::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.LogEntry.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogEntry::release_args() {
  // @@protoc_insertion_point(field_release:quintet.rpc.LogEntry.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogEntry::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.LogEntry.args)
}

// uint64 term = 3;
inline void LogEntry::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogEntry::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.LogEntry.term)
  return term_;
}
inline void LogEntry::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.LogEntry.term)
}

// -------------------------------------------------------------------

// AppendEntriesMessage

// uint64 term = 1;
inline void AppendEntriesMessage::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.term)
  return term_;
}
inline void AppendEntriesMessage::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.term)
}

// string leaderId = 2;
inline void AppendEntriesMessage::clear_leaderid() {
  leaderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AppendEntriesMessage::leaderid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.leaderId)
  return leaderid_.GetNoArena();
}
inline void AppendEntriesMessage::set_leaderid(const ::std::string& value) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.leaderId)
}
#if LANG_CXX11
inline void AppendEntriesMessage::set_leaderid(::std::string&& value) {
  
  leaderid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.AppendEntriesMessage.leaderId)
}
#endif
inline void AppendEntriesMessage::set_leaderid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.AppendEntriesMessage.leaderId)
}
inline void AppendEntriesMessage::set_leaderid(const char* value, size_t size) {
  
  leaderid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.AppendEntriesMessage.leaderId)
}
inline ::std::string* AppendEntriesMessage::mutable_leaderid() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.AppendEntriesMessage.leaderId)
  return leaderid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AppendEntriesMessage::release_leaderid() {
  // @@protoc_insertion_point(field_release:quintet.rpc.AppendEntriesMessage.leaderId)
  
  return leaderid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AppendEntriesMessage::set_allocated_leaderid(::std::string* leaderid) {
  if (leaderid != NULL) {
    
  } else {
    
  }
  leaderid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderid);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.AppendEntriesMessage.leaderId)
}

// uint64 prevLogIndex = 3;
inline void AppendEntriesMessage::clear_prevlogindex() {
  prevlogindex_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::prevlogindex() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.prevLogIndex)
  return prevlogindex_;
}
inline void AppendEntriesMessage::set_prevlogindex(::google::protobuf::uint64 value) {
  
  prevlogindex_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.prevLogIndex)
}

// uint64 prevLogTerm = 4;
inline void AppendEntriesMessage::clear_prevlogterm() {
  prevlogterm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::prevlogterm() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.prevLogTerm)
  return prevlogterm_;
}
inline void AppendEntriesMessage::set_prevlogterm(::google::protobuf::uint64 value) {
  
  prevlogterm_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.prevLogTerm)
}

// repeated .quintet.rpc.LogEntry entries = 5;
inline int AppendEntriesMessage::entries_size() const {
  return entries_.size();
}
inline void AppendEntriesMessage::clear_entries() {
  entries_.Clear();
}
inline ::quintet::rpc::LogEntry* AppendEntriesMessage::mutable_entries(int index) {
  // @@protoc_insertion_point(field_mutable:quintet.rpc.AppendEntriesMessage.entries)
  return entries_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::quintet::rpc::LogEntry >*
AppendEntriesMessage::mutable_entries() {
  // @@protoc_insertion_point(field_mutable_list:quintet.rpc.AppendEntriesMessage.entries)
  return &entries_;
}
inline const ::quintet::rpc::LogEntry& AppendEntriesMessage::entries(int index) const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.entries)
  return entries_.Get(index);
}
inline ::quintet::rpc::LogEntry* AppendEntriesMessage::add_entries() {
  // @@protoc_insertion_point(field_add:quintet.rpc.AppendEntriesMessage.entries)
  return entries_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::quintet::rpc::LogEntry >&
AppendEntriesMessage::entries() const {
  // @@protoc_insertion_point(field_list:quintet.rpc.AppendEntriesMessage.entries)
  return entries_;
}

// uint64 leaderCommit = 6;
inline void AppendEntriesMessage::clear_leadercommit() {
  leadercommit_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::leadercommit() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.leaderCommit)
  return leadercommit_;
}
inline void AppendEntriesMessage::set_leadercommit(::google::protobuf::uint64 value) {
  
  leadercommit_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.leaderCommit)
}

// uint64 debugId = 9;
inline void AppendEntriesMessage::clear_debugid() {
  debugid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesMessage::debugid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesMessage.debugId)
  return debugid_;
}
inline void AppendEntriesMessage::set_debugid(::google::protobuf::uint64 value) {
  
  debugid_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesMessage.debugId)
}

// -------------------------------------------------------------------

// AppendEntriesReply

// uint64 term = 1;
inline void AppendEntriesReply::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesReply::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesReply.term)
  return term_;
}
inline void AppendEntriesReply::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesReply.term)
}

// bool success = 2;
inline void AppendEntriesReply::clear_success() {
  success_ = false;
}
inline bool AppendEntriesReply::success() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesReply.success)
  return success_;
}
inline void AppendEntriesReply::set_success(bool value) {
  
  success_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesReply.success)
}

// uint64 debugId = 9;
inline void AppendEntriesReply::clear_debugid() {
  debugid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 AppendEntriesReply::debugid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.AppendEntriesReply.debugId)
  return debugid_;
}
inline void AppendEntriesReply::set_debugid(::google::protobuf::uint64 value) {
  
  debugid_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.AppendEntriesReply.debugId)
}

// -------------------------------------------------------------------

// RequestVoteMessage

// uint64 term = 1;
inline void RequestVoteMessage::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteMessage::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.term)
  return term_;
}
inline void RequestVoteMessage::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.term)
}

// string candidateId = 2;
inline void RequestVoteMessage::clear_candidateid() {
  candidateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RequestVoteMessage::candidateid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.candidateId)
  return candidateid_.GetNoArena();
}
inline void RequestVoteMessage::set_candidateid(const ::std::string& value) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.candidateId)
}
#if LANG_CXX11
inline void RequestVoteMessage::set_candidateid(::std::string&& value) {
  
  candidateid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.RequestVoteMessage.candidateId)
}
#endif
inline void RequestVoteMessage::set_candidateid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.RequestVoteMessage.candidateId)
}
inline void RequestVoteMessage::set_candidateid(const char* value, size_t size) {
  
  candidateid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.RequestVoteMessage.candidateId)
}
inline ::std::string* RequestVoteMessage::mutable_candidateid() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.RequestVoteMessage.candidateId)
  return candidateid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RequestVoteMessage::release_candidateid() {
  // @@protoc_insertion_point(field_release:quintet.rpc.RequestVoteMessage.candidateId)
  
  return candidateid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RequestVoteMessage::set_allocated_candidateid(::std::string* candidateid) {
  if (candidateid != NULL) {
    
  } else {
    
  }
  candidateid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidateid);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.RequestVoteMessage.candidateId)
}

// uint64 lastLogIndex = 3;
inline void RequestVoteMessage::clear_lastlogindex() {
  lastlogindex_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteMessage::lastlogindex() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.lastLogIndex)
  return lastlogindex_;
}
inline void RequestVoteMessage::set_lastlogindex(::google::protobuf::uint64 value) {
  
  lastlogindex_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.lastLogIndex)
}

// uint64 lastLogTerm = 4;
inline void RequestVoteMessage::clear_lastlogterm() {
  lastlogterm_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteMessage::lastlogterm() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.lastLogTerm)
  return lastlogterm_;
}
inline void RequestVoteMessage::set_lastlogterm(::google::protobuf::uint64 value) {
  
  lastlogterm_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.lastLogTerm)
}

// uint64 debugId = 9;
inline void RequestVoteMessage::clear_debugid() {
  debugid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteMessage::debugid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteMessage.debugId)
  return debugid_;
}
inline void RequestVoteMessage::set_debugid(::google::protobuf::uint64 value) {
  
  debugid_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteMessage.debugId)
}

// -------------------------------------------------------------------

// RequestVoteReply

// uint64 term = 1;
inline void RequestVoteReply::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteReply::term() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteReply.term)
  return term_;
}
inline void RequestVoteReply::set_term(::google::protobuf::uint64 value) {
  
  term_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteReply.term)
}

// bool voteGranted = 2;
inline void RequestVoteReply::clear_votegranted() {
  votegranted_ = false;
}
inline bool RequestVoteReply::votegranted() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteReply.voteGranted)
  return votegranted_;
}
inline void RequestVoteReply::set_votegranted(bool value) {
  
  votegranted_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteReply.voteGranted)
}

// uint64 debugId = 9;
inline void RequestVoteReply::clear_debugid() {
  debugid_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 RequestVoteReply::debugid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RequestVoteReply.debugId)
  return debugid_;
}
inline void RequestVoteReply::set_debugid(::google::protobuf::uint64 value) {
  
  debugid_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RequestVoteReply.debugId)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace quintet

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_internal_2eproto
