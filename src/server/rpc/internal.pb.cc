// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: internal.proto

#include "internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_internal_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_internal_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry;
}  // namespace protobuf_internal_2eproto
namespace quintet {
namespace rpc {
class LogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LogEntry>
      _instance;
} _LogEntry_default_instance_;
class AppendEntriesMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesMessage>
      _instance;
} _AppendEntriesMessage_default_instance_;
class AppendEntriesReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AppendEntriesReply>
      _instance;
} _AppendEntriesReply_default_instance_;
class RequestVoteMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteMessage>
      _instance;
} _RequestVoteMessage_default_instance_;
class RequestVoteReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestVoteReply>
      _instance;
} _RequestVoteReply_default_instance_;
}  // namespace rpc
}  // namespace quintet
namespace protobuf_internal_2eproto {
static void InitDefaultsLogEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::rpc::_LogEntry_default_instance_;
    new (ptr) ::quintet::rpc::LogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::rpc::LogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LogEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLogEntry}, {}};

static void InitDefaultsAppendEntriesMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::rpc::_AppendEntriesMessage_default_instance_;
    new (ptr) ::quintet::rpc::AppendEntriesMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::rpc::AppendEntriesMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AppendEntriesMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAppendEntriesMessage}, {
      &protobuf_internal_2eproto::scc_info_LogEntry.base,}};

static void InitDefaultsAppendEntriesReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::rpc::_AppendEntriesReply_default_instance_;
    new (ptr) ::quintet::rpc::AppendEntriesReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::rpc::AppendEntriesReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AppendEntriesReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAppendEntriesReply}, {}};

static void InitDefaultsRequestVoteMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::rpc::_RequestVoteMessage_default_instance_;
    new (ptr) ::quintet::rpc::RequestVoteMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::rpc::RequestVoteMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteMessage}, {}};

static void InitDefaultsRequestVoteReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::rpc::_RequestVoteReply_default_instance_;
    new (ptr) ::quintet::rpc::RequestVoteReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::rpc::RequestVoteReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestVoteReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestVoteReply}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_LogEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AppendEntriesReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RequestVoteReply.base);
}

::google::protobuf::Metadata file_level_metadata[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::LogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::LogEntry, opname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::LogEntry, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::LogEntry, term_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, prevlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, prevlogterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, entries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, leadercommit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesMessage, debugid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesReply, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesReply, success_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::AppendEntriesReply, debugid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteMessage, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteMessage, candidateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteMessage, lastlogindex_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteMessage, lastlogterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteMessage, debugid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteReply, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteReply, votegranted_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::rpc::RequestVoteReply, debugid_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::quintet::rpc::LogEntry)},
  { 8, -1, sizeof(::quintet::rpc::AppendEntriesMessage)},
  { 20, -1, sizeof(::quintet::rpc::AppendEntriesReply)},
  { 28, -1, sizeof(::quintet::rpc::RequestVoteMessage)},
  { 38, -1, sizeof(::quintet::rpc::RequestVoteReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::rpc::_LogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::rpc::_AppendEntriesMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::rpc::_AppendEntriesReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::rpc::_RequestVoteMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::rpc::_RequestVoteReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "internal.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016internal.proto\022\013quintet.rpc\"6\n\010LogEntr"
      "y\022\016\n\006opName\030\001 \001(\t\022\014\n\004args\030\002 \001(\t\022\014\n\004term\030"
      "\003 \001(\004\"\260\001\n\024AppendEntriesMessage\022\014\n\004term\030\001"
      " \001(\004\022\020\n\010leaderId\030\002 \001(\t\022\024\n\014prevLogIndex\030\003"
      " \001(\004\022\023\n\013prevLogTerm\030\004 \001(\004\022&\n\007entries\030\005 \003"
      "(\0132\025.quintet.rpc.LogEntry\022\024\n\014leaderCommi"
      "t\030\006 \001(\004\022\017\n\007debugId\030\t \001(\004\"D\n\022AppendEntrie"
      "sReply\022\014\n\004term\030\001 \001(\004\022\017\n\007success\030\002 \001(\010\022\017\n"
      "\007debugId\030\t \001(\004\"s\n\022RequestVoteMessage\022\014\n\004"
      "term\030\001 \001(\004\022\023\n\013candidateId\030\002 \001(\t\022\024\n\014lastL"
      "ogIndex\030\003 \001(\004\022\023\n\013lastLogTerm\030\004 \001(\004\022\017\n\007de"
      "bugId\030\t \001(\004\"F\n\020RequestVoteReply\022\014\n\004term\030"
      "\001 \001(\004\022\023\n\013voteGranted\030\002 \001(\010\022\017\n\007debugId\030\t "
      "\001(\0042\262\001\n\010Internal\022U\n\rAppendEntries\022!.quin"
      "tet.rpc.AppendEntriesMessage\032\037.quintet.r"
      "pc.AppendEntriesReply\"\000\022O\n\013RequestVote\022\037"
      ".quintet.rpc.RequestVoteMessage\032\035.quinte"
      "t.rpc.RequestVoteReply\"\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 712);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "internal.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_internal_2eproto
namespace quintet {
namespace rpc {

// ===================================================================

void LogEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogEntry::kOpNameFieldNumber;
const int LogEntry::kArgsFieldNumber;
const int LogEntry::kTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogEntry::LogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_LogEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.rpc.LogEntry)
}
LogEntry::LogEntry(const LogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opname().size() > 0) {
    opname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.args().size() > 0) {
    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:quintet.rpc.LogEntry)
}

void LogEntry::SharedCtor() {
  opname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_ULONGLONG(0);
}

LogEntry::~LogEntry() {
  // @@protoc_insertion_point(destructor:quintet.rpc.LogEntry)
  SharedDtor();
}

void LogEntry::SharedDtor() {
  opname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LogEntry::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LogEntry& LogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_LogEntry.base);
  return *internal_default_instance();
}


void LogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.rpc.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  term_ = GOOGLE_ULONGLONG(0);
  _internal_metadata_.Clear();
}

bool LogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.rpc.LogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string opName = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opname().data(), static_cast<int>(this->opname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.rpc.LogEntry.opName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string args = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args().data(), static_cast<int>(this->args().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.rpc.LogEntry.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 term = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.rpc.LogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.rpc.LogEntry)
  return false;
#undef DO_
}

void LogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.rpc.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string opName = 1;
  if (this->opname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opname().data(), static_cast<int>(this->opname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.LogEntry.opName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->opname(), output);
  }

  // string args = 2;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.LogEntry.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->args(), output);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->term(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.rpc.LogEntry)
}

::google::protobuf::uint8* LogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.rpc.LogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string opName = 1;
  if (this->opname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opname().data(), static_cast<int>(this->opname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.LogEntry.opName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->opname(), target);
  }

  // string args = 2;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.LogEntry.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->args(), target);
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->term(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.rpc.LogEntry)
  return target;
}

size_t LogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.rpc.LogEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string opName = 1;
  if (this->opname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opname());
  }

  // string args = 2;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->args());
  }

  // uint64 term = 3;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.rpc.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const LogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.rpc.LogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.rpc.LogEntry)
    MergeFrom(*source);
  }
}

void LogEntry::MergeFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.rpc.LogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opname().size() > 0) {

    opname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
}

void LogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.rpc.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogEntry::CopyFrom(const LogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.rpc.LogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogEntry::IsInitialized() const {
  return true;
}

void LogEntry::Swap(LogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogEntry::InternalSwap(LogEntry* other) {
  using std::swap;
  opname_.Swap(&other->opname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  args_.Swap(&other->args_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LogEntry::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesMessage::kTermFieldNumber;
const int AppendEntriesMessage::kLeaderIdFieldNumber;
const int AppendEntriesMessage::kPrevLogIndexFieldNumber;
const int AppendEntriesMessage::kPrevLogTermFieldNumber;
const int AppendEntriesMessage::kEntriesFieldNumber;
const int AppendEntriesMessage::kLeaderCommitFieldNumber;
const int AppendEntriesMessage::kDebugIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesMessage::AppendEntriesMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_AppendEntriesMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.rpc.AppendEntriesMessage)
}
AppendEntriesMessage::AppendEntriesMessage(const AppendEntriesMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      entries_(from.entries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderid().size() > 0) {
    leaderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&debugid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  // @@protoc_insertion_point(copy_constructor:quintet.rpc.AppendEntriesMessage)
}

void AppendEntriesMessage::SharedCtor() {
  leaderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
}

AppendEntriesMessage::~AppendEntriesMessage() {
  // @@protoc_insertion_point(destructor:quintet.rpc.AppendEntriesMessage)
  SharedDtor();
}

void AppendEntriesMessage::SharedDtor() {
  leaderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AppendEntriesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesMessage::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesMessage& AppendEntriesMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_AppendEntriesMessage.base);
  return *internal_default_instance();
}


void AppendEntriesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.rpc.AppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  entries_.Clear();
  leaderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  _internal_metadata_.Clear();
}

bool AppendEntriesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.rpc.AppendEntriesMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string leaderId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderid().data(), static_cast<int>(this->leaderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.rpc.AppendEntriesMessage.leaderId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prevLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prevLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quintet.rpc.LogEntry entries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_entries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 leaderCommit = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &leadercommit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 debugId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &debugid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.rpc.AppendEntriesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.rpc.AppendEntriesMessage)
  return false;
#undef DO_
}

void AppendEntriesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.rpc.AppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // string leaderId = 2;
  if (this->leaderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderid().data(), static_cast<int>(this->leaderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.AppendEntriesMessage.leaderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leaderid(), output);
  }

  // uint64 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prevlogindex(), output);
  }

  // uint64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prevlogterm(), output);
  }

  // repeated .quintet.rpc.LogEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->entries(static_cast<int>(i)),
      output);
  }

  // uint64 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->leadercommit(), output);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->debugid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.rpc.AppendEntriesMessage)
}

::google::protobuf::uint8* AppendEntriesMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.rpc.AppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // string leaderId = 2;
  if (this->leaderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderid().data(), static_cast<int>(this->leaderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.AppendEntriesMessage.leaderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leaderid(), target);
  }

  // uint64 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prevlogindex(), target);
  }

  // uint64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prevlogterm(), target);
  }

  // repeated .quintet.rpc.LogEntry entries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->entries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->entries(static_cast<int>(i)), deterministic, target);
  }

  // uint64 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->leadercommit(), target);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->debugid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.rpc.AppendEntriesMessage)
  return target;
}

size_t AppendEntriesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.rpc.AppendEntriesMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .quintet.rpc.LogEntry entries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->entries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->entries(static_cast<int>(i)));
    }
  }

  // string leaderId = 2;
  if (this->leaderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderid());
  }

  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 prevLogIndex = 3;
  if (this->prevlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prevlogindex());
  }

  // uint64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prevlogterm());
  }

  // uint64 leaderCommit = 6;
  if (this->leadercommit() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->leadercommit());
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->debugid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.rpc.AppendEntriesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.rpc.AppendEntriesMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.rpc.AppendEntriesMessage)
    MergeFrom(*source);
  }
}

void AppendEntriesMessage::MergeFrom(const AppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.rpc.AppendEntriesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  entries_.MergeFrom(from.entries_);
  if (from.leaderid().size() > 0) {

    leaderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.prevlogindex() != 0) {
    set_prevlogindex(from.prevlogindex());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.leadercommit() != 0) {
    set_leadercommit(from.leadercommit());
  }
  if (from.debugid() != 0) {
    set_debugid(from.debugid());
  }
}

void AppendEntriesMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.rpc.AppendEntriesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesMessage::CopyFrom(const AppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.rpc.AppendEntriesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesMessage::IsInitialized() const {
  return true;
}

void AppendEntriesMessage::Swap(AppendEntriesMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesMessage::InternalSwap(AppendEntriesMessage* other) {
  using std::swap;
  CastToBase(&entries_)->InternalSwap(CastToBase(&other->entries_));
  leaderid_.Swap(&other->leaderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(prevlogindex_, other->prevlogindex_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(leadercommit_, other->leadercommit_);
  swap(debugid_, other->debugid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesMessage::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AppendEntriesReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AppendEntriesReply::kTermFieldNumber;
const int AppendEntriesReply::kSuccessFieldNumber;
const int AppendEntriesReply::kDebugIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AppendEntriesReply::AppendEntriesReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_AppendEntriesReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.rpc.AppendEntriesReply)
}
AppendEntriesReply::AppendEntriesReply(const AppendEntriesReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&debugid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  // @@protoc_insertion_point(copy_constructor:quintet.rpc.AppendEntriesReply)
}

void AppendEntriesReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
}

AppendEntriesReply::~AppendEntriesReply() {
  // @@protoc_insertion_point(destructor:quintet.rpc.AppendEntriesReply)
  SharedDtor();
}

void AppendEntriesReply::SharedDtor() {
}

void AppendEntriesReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AppendEntriesReply::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AppendEntriesReply& AppendEntriesReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_AppendEntriesReply.base);
  return *internal_default_instance();
}


void AppendEntriesReply::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.rpc.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  _internal_metadata_.Clear();
}

bool AppendEntriesReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.rpc.AppendEntriesReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool success = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &success_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 debugId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &debugid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.rpc.AppendEntriesReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.rpc.AppendEntriesReply)
  return false;
#undef DO_
}

void AppendEntriesReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.rpc.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // bool success = 2;
  if (this->success() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->success(), output);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->debugid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.rpc.AppendEntriesReply)
}

::google::protobuf::uint8* AppendEntriesReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.rpc.AppendEntriesReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // bool success = 2;
  if (this->success() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->success(), target);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->debugid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.rpc.AppendEntriesReply)
  return target;
}

size_t AppendEntriesReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.rpc.AppendEntriesReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // bool success = 2;
  if (this->success() != 0) {
    total_size += 1 + 1;
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->debugid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppendEntriesReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.rpc.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AppendEntriesReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AppendEntriesReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.rpc.AppendEntriesReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.rpc.AppendEntriesReply)
    MergeFrom(*source);
  }
}

void AppendEntriesReply::MergeFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.rpc.AppendEntriesReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.success() != 0) {
    set_success(from.success());
  }
  if (from.debugid() != 0) {
    set_debugid(from.debugid());
  }
}

void AppendEntriesReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.rpc.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppendEntriesReply::CopyFrom(const AppendEntriesReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.rpc.AppendEntriesReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppendEntriesReply::IsInitialized() const {
  return true;
}

void AppendEntriesReply::Swap(AppendEntriesReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AppendEntriesReply::InternalSwap(AppendEntriesReply* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(success_, other->success_);
  swap(debugid_, other->debugid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AppendEntriesReply::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteMessage::kTermFieldNumber;
const int RequestVoteMessage::kCandidateIdFieldNumber;
const int RequestVoteMessage::kLastLogIndexFieldNumber;
const int RequestVoteMessage::kLastLogTermFieldNumber;
const int RequestVoteMessage::kDebugIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteMessage::RequestVoteMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_RequestVoteMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.rpc.RequestVoteMessage)
}
RequestVoteMessage::RequestVoteMessage(const RequestVoteMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.candidateid().size() > 0) {
    candidateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidateid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&debugid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  // @@protoc_insertion_point(copy_constructor:quintet.rpc.RequestVoteMessage)
}

void RequestVoteMessage::SharedCtor() {
  candidateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
}

RequestVoteMessage::~RequestVoteMessage() {
  // @@protoc_insertion_point(destructor:quintet.rpc.RequestVoteMessage)
  SharedDtor();
}

void RequestVoteMessage::SharedDtor() {
  candidateid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestVoteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteMessage::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteMessage& RequestVoteMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_RequestVoteMessage.base);
  return *internal_default_instance();
}


void RequestVoteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.rpc.RequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  _internal_metadata_.Clear();
}

bool RequestVoteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.rpc.RequestVoteMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string candidateId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidateid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->candidateid().data(), static_cast<int>(this->candidateid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.rpc.RequestVoteMessage.candidateId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lastLogIndex = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lastLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 debugId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &debugid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.rpc.RequestVoteMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.rpc.RequestVoteMessage)
  return false;
#undef DO_
}

void RequestVoteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.rpc.RequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // string candidateId = 2;
  if (this->candidateid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidateid().data(), static_cast<int>(this->candidateid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.RequestVoteMessage.candidateId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->candidateid(), output);
  }

  // uint64 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastlogindex(), output);
  }

  // uint64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastlogterm(), output);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->debugid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.rpc.RequestVoteMessage)
}

::google::protobuf::uint8* RequestVoteMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.rpc.RequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // string candidateId = 2;
  if (this->candidateid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidateid().data(), static_cast<int>(this->candidateid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.rpc.RequestVoteMessage.candidateId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->candidateid(), target);
  }

  // uint64 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastlogindex(), target);
  }

  // uint64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastlogterm(), target);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->debugid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.rpc.RequestVoteMessage)
  return target;
}

size_t RequestVoteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.rpc.RequestVoteMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string candidateId = 2;
  if (this->candidateid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->candidateid());
  }

  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 lastLogIndex = 3;
  if (this->lastlogindex() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastlogindex());
  }

  // uint64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastlogterm());
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->debugid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.rpc.RequestVoteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.rpc.RequestVoteMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.rpc.RequestVoteMessage)
    MergeFrom(*source);
  }
}

void RequestVoteMessage::MergeFrom(const RequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.rpc.RequestVoteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidateid().size() > 0) {

    candidateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidateid_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.lastlogindex() != 0) {
    set_lastlogindex(from.lastlogindex());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
  if (from.debugid() != 0) {
    set_debugid(from.debugid());
  }
}

void RequestVoteMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.rpc.RequestVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteMessage::CopyFrom(const RequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.rpc.RequestVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteMessage::IsInitialized() const {
  return true;
}

void RequestVoteMessage::Swap(RequestVoteMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteMessage::InternalSwap(RequestVoteMessage* other) {
  using std::swap;
  candidateid_.Swap(&other->candidateid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(lastlogindex_, other->lastlogindex_);
  swap(lastlogterm_, other->lastlogterm_);
  swap(debugid_, other->debugid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteMessage::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RequestVoteReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestVoteReply::kTermFieldNumber;
const int RequestVoteReply::kVoteGrantedFieldNumber;
const int RequestVoteReply::kDebugIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestVoteReply::RequestVoteReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_internal_2eproto::scc_info_RequestVoteReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.rpc.RequestVoteReply)
}
RequestVoteReply::RequestVoteReply(const RequestVoteReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&debugid_) -
    reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  // @@protoc_insertion_point(copy_constructor:quintet.rpc.RequestVoteReply)
}

void RequestVoteReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
}

RequestVoteReply::~RequestVoteReply() {
  // @@protoc_insertion_point(destructor:quintet.rpc.RequestVoteReply)
  SharedDtor();
}

void RequestVoteReply::SharedDtor() {
}

void RequestVoteReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestVoteReply::descriptor() {
  ::protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestVoteReply& RequestVoteReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_internal_2eproto::scc_info_RequestVoteReply.base);
  return *internal_default_instance();
}


void RequestVoteReply::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.rpc.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&debugid_) -
      reinterpret_cast<char*>(&term_)) + sizeof(debugid_));
  _internal_metadata_.Clear();
}

bool RequestVoteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.rpc.RequestVoteReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool voteGranted = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &votegranted_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 debugId = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u /* 72 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &debugid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.rpc.RequestVoteReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.rpc.RequestVoteReply)
  return false;
#undef DO_
}

void RequestVoteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.rpc.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->votegranted(), output);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(9, this->debugid(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.rpc.RequestVoteReply)
}

::google::protobuf::uint8* RequestVoteReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.rpc.RequestVoteReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->votegranted(), target);
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(9, this->debugid(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.rpc.RequestVoteReply)
  return target;
}

size_t RequestVoteReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.rpc.RequestVoteReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // bool voteGranted = 2;
  if (this->votegranted() != 0) {
    total_size += 1 + 1;
  }

  // uint64 debugId = 9;
  if (this->debugid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->debugid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestVoteReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.rpc.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestVoteReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestVoteReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.rpc.RequestVoteReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.rpc.RequestVoteReply)
    MergeFrom(*source);
  }
}

void RequestVoteReply::MergeFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.rpc.RequestVoteReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.votegranted() != 0) {
    set_votegranted(from.votegranted());
  }
  if (from.debugid() != 0) {
    set_debugid(from.debugid());
  }
}

void RequestVoteReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.rpc.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestVoteReply::CopyFrom(const RequestVoteReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.rpc.RequestVoteReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestVoteReply::IsInitialized() const {
  return true;
}

void RequestVoteReply::Swap(RequestVoteReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestVoteReply::InternalSwap(RequestVoteReply* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(votegranted_, other->votegranted_);
  swap(debugid_, other->debugid_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestVoteReply::GetMetadata() const {
  protobuf_internal_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_internal_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace quintet
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::rpc::LogEntry* Arena::CreateMaybeMessage< ::quintet::rpc::LogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::rpc::LogEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::rpc::AppendEntriesMessage* Arena::CreateMaybeMessage< ::quintet::rpc::AppendEntriesMessage >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::rpc::AppendEntriesMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::rpc::AppendEntriesReply* Arena::CreateMaybeMessage< ::quintet::rpc::AppendEntriesReply >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::rpc::AppendEntriesReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::rpc::RequestVoteMessage* Arena::CreateMaybeMessage< ::quintet::rpc::RequestVoteMessage >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::rpc::RequestVoteMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::rpc::RequestVoteReply* Arena::CreateMaybeMessage< ::quintet::rpc::RequestVoteReply >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::rpc::RequestVoteReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
