// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: raft.proto

#include "raft.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_raft_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_raft_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PbLogEntry;
}  // namespace protobuf_raft_2eproto
namespace quintet {
namespace raft {
namespace rpc {
class PbReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbReply>
      _instance;
} _PbReply_default_instance_;
class PbLogEntryDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbLogEntry>
      _instance;
} _PbLogEntry_default_instance_;
class PbAppendEntriesMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbAppendEntriesMessage>
      _instance;
} _PbAppendEntriesMessage_default_instance_;
class PbRequestVoteMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PbRequestVoteMessage>
      _instance;
} _PbRequestVoteMessage_default_instance_;
}  // namespace rpc
}  // namespace raft
}  // namespace quintet
namespace protobuf_raft_2eproto {
static void InitDefaultsPbReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::raft::rpc::_PbReply_default_instance_;
    new (ptr) ::quintet::raft::rpc::PbReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::raft::rpc::PbReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbReply}, {}};

static void InitDefaultsPbLogEntry() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::raft::rpc::_PbLogEntry_default_instance_;
    new (ptr) ::quintet::raft::rpc::PbLogEntry();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::raft::rpc::PbLogEntry::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbLogEntry =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbLogEntry}, {}};

static void InitDefaultsPbAppendEntriesMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::raft::rpc::_PbAppendEntriesMessage_default_instance_;
    new (ptr) ::quintet::raft::rpc::PbAppendEntriesMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::raft::rpc::PbAppendEntriesMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_PbAppendEntriesMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsPbAppendEntriesMessage}, {
      &protobuf_raft_2eproto::scc_info_PbLogEntry.base,}};

static void InitDefaultsPbRequestVoteMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::quintet::raft::rpc::_PbRequestVoteMessage_default_instance_;
    new (ptr) ::quintet::raft::rpc::PbRequestVoteMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::quintet::raft::rpc::PbRequestVoteMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PbRequestVoteMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPbRequestVoteMessage}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_PbReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PbLogEntry.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PbAppendEntriesMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PbRequestVoteMessage.base);
}

::google::protobuf::Metadata file_level_metadata[4];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbReply, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbReply, ans_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbLogEntry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbLogEntry, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbLogEntry, opname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbLogEntry, args_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbLogEntry, prmidx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbAppendEntriesMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbAppendEntriesMessage, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbAppendEntriesMessage, leaderid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbAppendEntriesMessage, prevlogidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbAppendEntriesMessage, prevlogterm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbAppendEntriesMessage, logentries_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbAppendEntriesMessage, commitidx_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbRequestVoteMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbRequestVoteMessage, term_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbRequestVoteMessage, candidateid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbRequestVoteMessage, lastlogidx_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::quintet::raft::rpc::PbRequestVoteMessage, lastlogterm_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::quintet::raft::rpc::PbReply)},
  { 7, -1, sizeof(::quintet::raft::rpc::PbLogEntry)},
  { 16, -1, sizeof(::quintet::raft::rpc::PbAppendEntriesMessage)},
  { 27, -1, sizeof(::quintet::raft::rpc::PbRequestVoteMessage)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::raft::rpc::_PbReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::raft::rpc::_PbLogEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::raft::rpc::_PbAppendEntriesMessage_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::quintet::raft::rpc::_PbRequestVoteMessage_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "raft.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nraft.proto\022\020quintet.raft.rpc\"$\n\007PbRepl"
      "y\022\014\n\004term\030\001 \001(\004\022\013\n\003ans\030\002 \001(\010\"H\n\nPbLogEnt"
      "ry\022\014\n\004term\030\001 \001(\004\022\016\n\006opName\030\002 \001(\t\022\014\n\004args"
      "\030\003 \001(\t\022\016\n\006prmIdx\030\004 \001(\004\"\246\001\n\026PbAppendEntri"
      "esMessage\022\014\n\004term\030\001 \001(\004\022\020\n\010leaderId\030\002 \001("
      "\t\022\022\n\nprevLogIdx\030\003 \001(\004\022\023\n\013prevLogTerm\030\004 \001"
      "(\004\0220\n\nlogEntries\030\005 \003(\0132\034.quintet.raft.rp"
      "c.PbLogEntry\022\021\n\tcommitIdx\030\006 \001(\004\"b\n\024PbReq"
      "uestVoteMessage\022\014\n\004term\030\001 \001(\004\022\023\n\013candida"
      "teId\030\002 \001(\t\022\022\n\nlastLogIdx\030\003 \001(\004\022\023\n\013lastLo"
      "gTerm\030\004 \001(\0042\265\001\n\007RaftRpc\022V\n\rAppendEntries"
      "\022(.quintet.raft.rpc.PbAppendEntriesMessa"
      "ge\032\031.quintet.raft.rpc.PbReply\"\000\022R\n\013Reque"
      "stVote\022&.quintet.raft.rpc.PbRequestVoteM"
      "essage\032\031.quintet.raft.rpc.PbReply\"\000b\006pro"
      "to3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 603);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "raft.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_raft_2eproto
namespace quintet {
namespace raft {
namespace rpc {

// ===================================================================

void PbReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbReply::kTermFieldNumber;
const int PbReply::kAnsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbReply::PbReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_PbReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.raft.rpc.PbReply)
}
PbReply::PbReply(const PbReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&ans_) -
    reinterpret_cast<char*>(&term_)) + sizeof(ans_));
  // @@protoc_insertion_point(copy_constructor:quintet.raft.rpc.PbReply)
}

void PbReply::SharedCtor() {
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ans_) -
      reinterpret_cast<char*>(&term_)) + sizeof(ans_));
}

PbReply::~PbReply() {
  // @@protoc_insertion_point(destructor:quintet.raft.rpc.PbReply)
  SharedDtor();
}

void PbReply::SharedDtor() {
}

void PbReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PbReply::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbReply& PbReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_PbReply.base);
  return *internal_default_instance();
}


void PbReply::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.raft.rpc.PbReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ans_) -
      reinterpret_cast<char*>(&term_)) + sizeof(ans_));
  _internal_metadata_.Clear();
}

bool PbReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.raft.rpc.PbReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool ans = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ans_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.raft.rpc.PbReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.raft.rpc.PbReply)
  return false;
#undef DO_
}

void PbReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.raft.rpc.PbReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // bool ans = 2;
  if (this->ans() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->ans(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.raft.rpc.PbReply)
}

::google::protobuf::uint8* PbReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.raft.rpc.PbReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // bool ans = 2;
  if (this->ans() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->ans(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.raft.rpc.PbReply)
  return target;
}

size_t PbReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.raft.rpc.PbReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // bool ans = 2;
  if (this->ans() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.raft.rpc.PbReply)
  GOOGLE_DCHECK_NE(&from, this);
  const PbReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.raft.rpc.PbReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.raft.rpc.PbReply)
    MergeFrom(*source);
  }
}

void PbReply::MergeFrom(const PbReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.raft.rpc.PbReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.ans() != 0) {
    set_ans(from.ans());
  }
}

void PbReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.raft.rpc.PbReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbReply::CopyFrom(const PbReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.raft.rpc.PbReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbReply::IsInitialized() const {
  return true;
}

void PbReply::Swap(PbReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbReply::InternalSwap(PbReply* other) {
  using std::swap;
  swap(term_, other->term_);
  swap(ans_, other->ans_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PbReply::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbLogEntry::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbLogEntry::kTermFieldNumber;
const int PbLogEntry::kOpNameFieldNumber;
const int PbLogEntry::kArgsFieldNumber;
const int PbLogEntry::kPrmIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbLogEntry::PbLogEntry()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_PbLogEntry.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.raft.rpc.PbLogEntry)
}
PbLogEntry::PbLogEntry(const PbLogEntry& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  opname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.opname().size() > 0) {
    opname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.args().size() > 0) {
    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&prmidx_) -
    reinterpret_cast<char*>(&term_)) + sizeof(prmidx_));
  // @@protoc_insertion_point(copy_constructor:quintet.raft.rpc.PbLogEntry)
}

void PbLogEntry::SharedCtor() {
  opname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prmidx_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prmidx_));
}

PbLogEntry::~PbLogEntry() {
  // @@protoc_insertion_point(destructor:quintet.raft.rpc.PbLogEntry)
  SharedDtor();
}

void PbLogEntry::SharedDtor() {
  opname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PbLogEntry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PbLogEntry::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbLogEntry& PbLogEntry::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_PbLogEntry.base);
  return *internal_default_instance();
}


void PbLogEntry::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.raft.rpc.PbLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&prmidx_) -
      reinterpret_cast<char*>(&term_)) + sizeof(prmidx_));
  _internal_metadata_.Clear();
}

bool PbLogEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.raft.rpc.PbLogEntry)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string opName = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->opname().data(), static_cast<int>(this->opname().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.raft.rpc.PbLogEntry.opName"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string args = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_args()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->args().data(), static_cast<int>(this->args().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.raft.rpc.PbLogEntry.args"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prmIdx = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prmidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.raft.rpc.PbLogEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.raft.rpc.PbLogEntry)
  return false;
#undef DO_
}

void PbLogEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.raft.rpc.PbLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // string opName = 2;
  if (this->opname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opname().data(), static_cast<int>(this->opname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbLogEntry.opName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->opname(), output);
  }

  // string args = 3;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbLogEntry.args");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->args(), output);
  }

  // uint64 prmIdx = 4;
  if (this->prmidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prmidx(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.raft.rpc.PbLogEntry)
}

::google::protobuf::uint8* PbLogEntry::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.raft.rpc.PbLogEntry)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // string opName = 2;
  if (this->opname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->opname().data(), static_cast<int>(this->opname().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbLogEntry.opName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->opname(), target);
  }

  // string args = 3;
  if (this->args().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->args().data(), static_cast<int>(this->args().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbLogEntry.args");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->args(), target);
  }

  // uint64 prmIdx = 4;
  if (this->prmidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prmidx(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.raft.rpc.PbLogEntry)
  return target;
}

size_t PbLogEntry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.raft.rpc.PbLogEntry)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string opName = 2;
  if (this->opname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->opname());
  }

  // string args = 3;
  if (this->args().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->args());
  }

  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 prmIdx = 4;
  if (this->prmidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prmidx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbLogEntry::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.raft.rpc.PbLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  const PbLogEntry* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbLogEntry>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.raft.rpc.PbLogEntry)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.raft.rpc.PbLogEntry)
    MergeFrom(*source);
  }
}

void PbLogEntry::MergeFrom(const PbLogEntry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.raft.rpc.PbLogEntry)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opname().size() > 0) {

    opname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.opname_);
  }
  if (from.args().size() > 0) {

    args_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.args_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.prmidx() != 0) {
    set_prmidx(from.prmidx());
  }
}

void PbLogEntry::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.raft.rpc.PbLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbLogEntry::CopyFrom(const PbLogEntry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.raft.rpc.PbLogEntry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbLogEntry::IsInitialized() const {
  return true;
}

void PbLogEntry::Swap(PbLogEntry* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbLogEntry::InternalSwap(PbLogEntry* other) {
  using std::swap;
  opname_.Swap(&other->opname_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  args_.Swap(&other->args_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(prmidx_, other->prmidx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PbLogEntry::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbAppendEntriesMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbAppendEntriesMessage::kTermFieldNumber;
const int PbAppendEntriesMessage::kLeaderIdFieldNumber;
const int PbAppendEntriesMessage::kPrevLogIdxFieldNumber;
const int PbAppendEntriesMessage::kPrevLogTermFieldNumber;
const int PbAppendEntriesMessage::kLogEntriesFieldNumber;
const int PbAppendEntriesMessage::kCommitIdxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbAppendEntriesMessage::PbAppendEntriesMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_PbAppendEntriesMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.raft.rpc.PbAppendEntriesMessage)
}
PbAppendEntriesMessage::PbAppendEntriesMessage(const PbAppendEntriesMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      logentries_(from.logentries_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  leaderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.leaderid().size() > 0) {
    leaderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&commitidx_) -
    reinterpret_cast<char*>(&term_)) + sizeof(commitidx_));
  // @@protoc_insertion_point(copy_constructor:quintet.raft.rpc.PbAppendEntriesMessage)
}

void PbAppendEntriesMessage::SharedCtor() {
  leaderid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commitidx_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commitidx_));
}

PbAppendEntriesMessage::~PbAppendEntriesMessage() {
  // @@protoc_insertion_point(destructor:quintet.raft.rpc.PbAppendEntriesMessage)
  SharedDtor();
}

void PbAppendEntriesMessage::SharedDtor() {
  leaderid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PbAppendEntriesMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PbAppendEntriesMessage::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbAppendEntriesMessage& PbAppendEntriesMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_PbAppendEntriesMessage.base);
  return *internal_default_instance();
}


void PbAppendEntriesMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.raft.rpc.PbAppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logentries_.Clear();
  leaderid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&commitidx_) -
      reinterpret_cast<char*>(&term_)) + sizeof(commitidx_));
  _internal_metadata_.Clear();
}

bool PbAppendEntriesMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.raft.rpc.PbAppendEntriesMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string leaderId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leaderid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->leaderid().data(), static_cast<int>(this->leaderid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.raft.rpc.PbAppendEntriesMessage.leaderId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prevLogIdx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 prevLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &prevlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .quintet.raft.rpc.PbLogEntry logEntries = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_logentries()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 commitIdx = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &commitidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.raft.rpc.PbAppendEntriesMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.raft.rpc.PbAppendEntriesMessage)
  return false;
#undef DO_
}

void PbAppendEntriesMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.raft.rpc.PbAppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // string leaderId = 2;
  if (this->leaderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderid().data(), static_cast<int>(this->leaderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbAppendEntriesMessage.leaderId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->leaderid(), output);
  }

  // uint64 prevLogIdx = 3;
  if (this->prevlogidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->prevlogidx(), output);
  }

  // uint64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->prevlogterm(), output);
  }

  // repeated .quintet.raft.rpc.PbLogEntry logEntries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logentries_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5,
      this->logentries(static_cast<int>(i)),
      output);
  }

  // uint64 commitIdx = 6;
  if (this->commitidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->commitidx(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.raft.rpc.PbAppendEntriesMessage)
}

::google::protobuf::uint8* PbAppendEntriesMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.raft.rpc.PbAppendEntriesMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // string leaderId = 2;
  if (this->leaderid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->leaderid().data(), static_cast<int>(this->leaderid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbAppendEntriesMessage.leaderId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->leaderid(), target);
  }

  // uint64 prevLogIdx = 3;
  if (this->prevlogidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->prevlogidx(), target);
  }

  // uint64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->prevlogterm(), target);
  }

  // repeated .quintet.raft.rpc.PbLogEntry logEntries = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->logentries_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->logentries(static_cast<int>(i)), deterministic, target);
  }

  // uint64 commitIdx = 6;
  if (this->commitidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->commitidx(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.raft.rpc.PbAppendEntriesMessage)
  return target;
}

size_t PbAppendEntriesMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.raft.rpc.PbAppendEntriesMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .quintet.raft.rpc.PbLogEntry logEntries = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->logentries_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->logentries(static_cast<int>(i)));
    }
  }

  // string leaderId = 2;
  if (this->leaderid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->leaderid());
  }

  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 prevLogIdx = 3;
  if (this->prevlogidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prevlogidx());
  }

  // uint64 prevLogTerm = 4;
  if (this->prevlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->prevlogterm());
  }

  // uint64 commitIdx = 6;
  if (this->commitidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->commitidx());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbAppendEntriesMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.raft.rpc.PbAppendEntriesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PbAppendEntriesMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbAppendEntriesMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.raft.rpc.PbAppendEntriesMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.raft.rpc.PbAppendEntriesMessage)
    MergeFrom(*source);
  }
}

void PbAppendEntriesMessage::MergeFrom(const PbAppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.raft.rpc.PbAppendEntriesMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  logentries_.MergeFrom(from.logentries_);
  if (from.leaderid().size() > 0) {

    leaderid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.leaderid_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.prevlogidx() != 0) {
    set_prevlogidx(from.prevlogidx());
  }
  if (from.prevlogterm() != 0) {
    set_prevlogterm(from.prevlogterm());
  }
  if (from.commitidx() != 0) {
    set_commitidx(from.commitidx());
  }
}

void PbAppendEntriesMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.raft.rpc.PbAppendEntriesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbAppendEntriesMessage::CopyFrom(const PbAppendEntriesMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.raft.rpc.PbAppendEntriesMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbAppendEntriesMessage::IsInitialized() const {
  return true;
}

void PbAppendEntriesMessage::Swap(PbAppendEntriesMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbAppendEntriesMessage::InternalSwap(PbAppendEntriesMessage* other) {
  using std::swap;
  CastToBase(&logentries_)->InternalSwap(CastToBase(&other->logentries_));
  leaderid_.Swap(&other->leaderid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(prevlogidx_, other->prevlogidx_);
  swap(prevlogterm_, other->prevlogterm_);
  swap(commitidx_, other->commitidx_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PbAppendEntriesMessage::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PbRequestVoteMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PbRequestVoteMessage::kTermFieldNumber;
const int PbRequestVoteMessage::kCandidateIdFieldNumber;
const int PbRequestVoteMessage::kLastLogIdxFieldNumber;
const int PbRequestVoteMessage::kLastLogTermFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PbRequestVoteMessage::PbRequestVoteMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_raft_2eproto::scc_info_PbRequestVoteMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:quintet.raft.rpc.PbRequestVoteMessage)
}
PbRequestVoteMessage::PbRequestVoteMessage(const PbRequestVoteMessage& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  candidateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.candidateid().size() > 0) {
    candidateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidateid_);
  }
  ::memcpy(&term_, &from.term_,
    static_cast<size_t>(reinterpret_cast<char*>(&lastlogterm_) -
    reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  // @@protoc_insertion_point(copy_constructor:quintet.raft.rpc.PbRequestVoteMessage)
}

void PbRequestVoteMessage::SharedCtor() {
  candidateid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
}

PbRequestVoteMessage::~PbRequestVoteMessage() {
  // @@protoc_insertion_point(destructor:quintet.raft.rpc.PbRequestVoteMessage)
  SharedDtor();
}

void PbRequestVoteMessage::SharedDtor() {
  candidateid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PbRequestVoteMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PbRequestVoteMessage::descriptor() {
  ::protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PbRequestVoteMessage& PbRequestVoteMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_raft_2eproto::scc_info_PbRequestVoteMessage.base);
  return *internal_default_instance();
}


void PbRequestVoteMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:quintet.raft.rpc.PbRequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  candidateid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&term_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lastlogterm_) -
      reinterpret_cast<char*>(&term_)) + sizeof(lastlogterm_));
  _internal_metadata_.Clear();
}

bool PbRequestVoteMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:quintet.raft.rpc.PbRequestVoteMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 term = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &term_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string candidateId = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_candidateid()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->candidateid().data(), static_cast<int>(this->candidateid().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "quintet.raft.rpc.PbRequestVoteMessage.candidateId"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lastLogIdx = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogidx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 lastLogTerm = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastlogterm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:quintet.raft.rpc.PbRequestVoteMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:quintet.raft.rpc.PbRequestVoteMessage)
  return false;
#undef DO_
}

void PbRequestVoteMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:quintet.raft.rpc.PbRequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->term(), output);
  }

  // string candidateId = 2;
  if (this->candidateid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidateid().data(), static_cast<int>(this->candidateid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbRequestVoteMessage.candidateId");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->candidateid(), output);
  }

  // uint64 lastLogIdx = 3;
  if (this->lastlogidx() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastlogidx(), output);
  }

  // uint64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->lastlogterm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:quintet.raft.rpc.PbRequestVoteMessage)
}

::google::protobuf::uint8* PbRequestVoteMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:quintet.raft.rpc.PbRequestVoteMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->term() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->term(), target);
  }

  // string candidateId = 2;
  if (this->candidateid().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->candidateid().data(), static_cast<int>(this->candidateid().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "quintet.raft.rpc.PbRequestVoteMessage.candidateId");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->candidateid(), target);
  }

  // uint64 lastLogIdx = 3;
  if (this->lastlogidx() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastlogidx(), target);
  }

  // uint64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->lastlogterm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:quintet.raft.rpc.PbRequestVoteMessage)
  return target;
}

size_t PbRequestVoteMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:quintet.raft.rpc.PbRequestVoteMessage)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string candidateId = 2;
  if (this->candidateid().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->candidateid());
  }

  // uint64 term = 1;
  if (this->term() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->term());
  }

  // uint64 lastLogIdx = 3;
  if (this->lastlogidx() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastlogidx());
  }

  // uint64 lastLogTerm = 4;
  if (this->lastlogterm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->lastlogterm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PbRequestVoteMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:quintet.raft.rpc.PbRequestVoteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const PbRequestVoteMessage* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PbRequestVoteMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:quintet.raft.rpc.PbRequestVoteMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:quintet.raft.rpc.PbRequestVoteMessage)
    MergeFrom(*source);
  }
}

void PbRequestVoteMessage::MergeFrom(const PbRequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:quintet.raft.rpc.PbRequestVoteMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.candidateid().size() > 0) {

    candidateid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.candidateid_);
  }
  if (from.term() != 0) {
    set_term(from.term());
  }
  if (from.lastlogidx() != 0) {
    set_lastlogidx(from.lastlogidx());
  }
  if (from.lastlogterm() != 0) {
    set_lastlogterm(from.lastlogterm());
  }
}

void PbRequestVoteMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:quintet.raft.rpc.PbRequestVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PbRequestVoteMessage::CopyFrom(const PbRequestVoteMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:quintet.raft.rpc.PbRequestVoteMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PbRequestVoteMessage::IsInitialized() const {
  return true;
}

void PbRequestVoteMessage::Swap(PbRequestVoteMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PbRequestVoteMessage::InternalSwap(PbRequestVoteMessage* other) {
  using std::swap;
  candidateid_.Swap(&other->candidateid_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(term_, other->term_);
  swap(lastlogidx_, other->lastlogidx_);
  swap(lastlogterm_, other->lastlogterm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PbRequestVoteMessage::GetMetadata() const {
  protobuf_raft_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_raft_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace rpc
}  // namespace raft
}  // namespace quintet
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::raft::rpc::PbReply* Arena::CreateMaybeMessage< ::quintet::raft::rpc::PbReply >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::raft::rpc::PbReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::raft::rpc::PbLogEntry* Arena::CreateMaybeMessage< ::quintet::raft::rpc::PbLogEntry >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::raft::rpc::PbLogEntry >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::raft::rpc::PbAppendEntriesMessage* Arena::CreateMaybeMessage< ::quintet::raft::rpc::PbAppendEntriesMessage >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::raft::rpc::PbAppendEntriesMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::quintet::raft::rpc::PbRequestVoteMessage* Arena::CreateMaybeMessage< ::quintet::raft::rpc::PbRequestVoteMessage >(Arena* arena) {
  return Arena::CreateInternal< ::quintet::raft::rpc::PbRequestVoteMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
