// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: RaftRpc.proto

#include "raft/service/rpc/RaftRpc.pb.h"
#include "raft/service/rpc/RaftRpc.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace quintet {
namespace rpc {

static const char* RaftRpc_method_names[] = {
  "/quintet.rpc.RaftRpc/AppendEntries",
  "/quintet.rpc.RaftRpc/RequestVote",
};

std::unique_ptr< RaftRpc::Stub> RaftRpc::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RaftRpc::Stub> stub(new RaftRpc::Stub(channel));
  return stub;
}

RaftRpc::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_AppendEntries_(RaftRpc_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVote_(RaftRpc_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RaftRpc::Stub::AppendEntries(::grpc::ClientContext* context, const ::quintet::rpc::AppendEntriesMessage& request, ::quintet::rpc::PbReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_AppendEntries_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::PbReply>* RaftRpc::Stub::AsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::quintet::rpc::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::PbReply>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::PbReply>* RaftRpc::Stub::PrepareAsyncAppendEntriesRaw(::grpc::ClientContext* context, const ::quintet::rpc::AppendEntriesMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::PbReply>::Create(channel_.get(), cq, rpcmethod_AppendEntries_, context, request, false);
}

::grpc::Status RaftRpc::Stub::RequestVote(::grpc::ClientContext* context, const ::quintet::rpc::RequestVoteMessage& request, ::quintet::rpc::PbReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::PbReply>* RaftRpc::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::quintet::rpc::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::PbReply>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::PbReply>* RaftRpc::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::quintet::rpc::RequestVoteMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::PbReply>::Create(channel_.get(), cq, rpcmethod_RequestVote_, context, request, false);
}

RaftRpc::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftRpc_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftRpc::Service, ::quintet::rpc::AppendEntriesMessage, ::quintet::rpc::PbReply>(
          std::mem_fn(&RaftRpc::Service::AppendEntries), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RaftRpc_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RaftRpc::Service, ::quintet::rpc::RequestVoteMessage, ::quintet::rpc::PbReply>(
          std::mem_fn(&RaftRpc::Service::RequestVote), this)));
}

RaftRpc::Service::~Service() {
}

::grpc::Status RaftRpc::Service::AppendEntries(::grpc::ServerContext* context, const ::quintet::rpc::AppendEntriesMessage* request, ::quintet::rpc::PbReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RaftRpc::Service::RequestVote(::grpc::ServerContext* context, const ::quintet::rpc::RequestVoteMessage* request, ::quintet::rpc::PbReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace quintet
}  // namespace rpc

