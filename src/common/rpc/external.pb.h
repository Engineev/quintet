// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: external.proto

#ifndef PROTOBUF_INCLUDED_external_2eproto
#define PROTOBUF_INCLUDED_external_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_external_2eproto 

namespace protobuf_external_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[4];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_external_2eproto
namespace quintet {
namespace rpc {
class ClientRequestMessage;
class ClientRequestMessageDefaultTypeInternal;
extern ClientRequestMessageDefaultTypeInternal _ClientRequestMessage_default_instance_;
class ClientRequestReply;
class ClientRequestReplyDefaultTypeInternal;
extern ClientRequestReplyDefaultTypeInternal _ClientRequestReply_default_instance_;
class Empty;
class EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class RegisterClientReply;
class RegisterClientReplyDefaultTypeInternal;
extern RegisterClientReplyDefaultTypeInternal _RegisterClientReply_default_instance_;
}  // namespace rpc
}  // namespace quintet
namespace google {
namespace protobuf {
template<> ::quintet::rpc::ClientRequestMessage* Arena::CreateMaybeMessage<::quintet::rpc::ClientRequestMessage>(Arena*);
template<> ::quintet::rpc::ClientRequestReply* Arena::CreateMaybeMessage<::quintet::rpc::ClientRequestReply>(Arena*);
template<> ::quintet::rpc::Empty* Arena::CreateMaybeMessage<::quintet::rpc::Empty>(Arena*);
template<> ::quintet::rpc::RegisterClientReply* Arena::CreateMaybeMessage<::quintet::rpc::RegisterClientReply>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace quintet {
namespace rpc {

enum Status {
  OK = 0,
  NOT_LEADER = 1,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool Status_IsValid(int value);
const Status Status_MIN = OK;
const Status Status_MAX = NOT_LEADER;
const int Status_ARRAYSIZE = Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Status_descriptor();
inline const ::std::string& Status_Name(Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Status_descriptor(), value);
}
inline bool Status_Parse(
    const ::std::string& name, Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
// ===================================================================

class Empty : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.Empty) */ {
 public:
  Empty();
  virtual ~Empty();

  Empty(const Empty& from);

  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Empty(Empty&& from) noexcept
    : Empty() {
    *this = ::std::move(from);
  }

  inline Empty& operator=(Empty&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Empty& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
               &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Empty* other);
  friend void swap(Empty& a, Empty& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Empty* New() const final {
    return CreateMaybeMessage<Empty>(NULL);
  }

  Empty* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Empty>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Empty& from);
  void MergeFrom(const Empty& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Empty* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:quintet.rpc.Empty)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_external_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RegisterClientReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.RegisterClientReply) */ {
 public:
  RegisterClientReply();
  virtual ~RegisterClientReply();

  RegisterClientReply(const RegisterClientReply& from);

  inline RegisterClientReply& operator=(const RegisterClientReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RegisterClientReply(RegisterClientReply&& from) noexcept
    : RegisterClientReply() {
    *this = ::std::move(from);
  }

  inline RegisterClientReply& operator=(RegisterClientReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RegisterClientReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RegisterClientReply* internal_default_instance() {
    return reinterpret_cast<const RegisterClientReply*>(
               &_RegisterClientReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(RegisterClientReply* other);
  friend void swap(RegisterClientReply& a, RegisterClientReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RegisterClientReply* New() const final {
    return CreateMaybeMessage<RegisterClientReply>(NULL);
  }

  RegisterClientReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RegisterClientReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RegisterClientReply& from);
  void MergeFrom(const RegisterClientReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RegisterClientReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // string leaderHint = 3;
  void clear_leaderhint();
  static const int kLeaderHintFieldNumber = 3;
  const ::std::string& leaderhint() const;
  void set_leaderhint(const ::std::string& value);
  #if LANG_CXX11
  void set_leaderhint(::std::string&& value);
  #endif
  void set_leaderhint(const char* value);
  void set_leaderhint(const char* value, size_t size);
  ::std::string* mutable_leaderhint();
  ::std::string* release_leaderhint();
  void set_allocated_leaderhint(::std::string* leaderhint);

  // .quintet.rpc.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::quintet::rpc::Status status() const;
  void set_status(::quintet::rpc::Status value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.RegisterClientReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr leaderhint_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_external_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientRequestMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.ClientRequestMessage) */ {
 public:
  ClientRequestMessage();
  virtual ~ClientRequestMessage();

  ClientRequestMessage(const ClientRequestMessage& from);

  inline ClientRequestMessage& operator=(const ClientRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientRequestMessage(ClientRequestMessage&& from) noexcept
    : ClientRequestMessage() {
    *this = ::std::move(from);
  }

  inline ClientRequestMessage& operator=(ClientRequestMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequestMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientRequestMessage* internal_default_instance() {
    return reinterpret_cast<const ClientRequestMessage*>(
               &_ClientRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ClientRequestMessage* other);
  friend void swap(ClientRequestMessage& a, ClientRequestMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientRequestMessage* New() const final {
    return CreateMaybeMessage<ClientRequestMessage>(NULL);
  }

  ClientRequestMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientRequestMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientRequestMessage& from);
  void MergeFrom(const ClientRequestMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequestMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string clientId = 1;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  #if LANG_CXX11
  void set_clientid(::std::string&& value);
  #endif
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // string opName = 3;
  void clear_opname();
  static const int kOpNameFieldNumber = 3;
  const ::std::string& opname() const;
  void set_opname(const ::std::string& value);
  #if LANG_CXX11
  void set_opname(::std::string&& value);
  #endif
  void set_opname(const char* value);
  void set_opname(const char* value, size_t size);
  ::std::string* mutable_opname();
  ::std::string* release_opname();
  void set_allocated_opname(::std::string* opname);

  // string args = 4;
  void clear_args();
  static const int kArgsFieldNumber = 4;
  const ::std::string& args() const;
  void set_args(const ::std::string& value);
  #if LANG_CXX11
  void set_args(::std::string&& value);
  #endif
  void set_args(const char* value);
  void set_args(const char* value, size_t size);
  ::std::string* mutable_args();
  ::std::string* release_args();
  void set_allocated_args(::std::string* args);

  // uint64 sequenceNum = 2;
  void clear_sequencenum();
  static const int kSequenceNumFieldNumber = 2;
  ::google::protobuf::uint64 sequencenum() const;
  void set_sequencenum(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.ClientRequestMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr opname_;
  ::google::protobuf::internal::ArenaStringPtr args_;
  ::google::protobuf::uint64 sequencenum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_external_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientRequestReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:quintet.rpc.ClientRequestReply) */ {
 public:
  ClientRequestReply();
  virtual ~ClientRequestReply();

  ClientRequestReply(const ClientRequestReply& from);

  inline ClientRequestReply& operator=(const ClientRequestReply& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientRequestReply(ClientRequestReply&& from) noexcept
    : ClientRequestReply() {
    *this = ::std::move(from);
  }

  inline ClientRequestReply& operator=(ClientRequestReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRequestReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientRequestReply* internal_default_instance() {
    return reinterpret_cast<const ClientRequestReply*>(
               &_ClientRequestReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ClientRequestReply* other);
  friend void swap(ClientRequestReply& a, ClientRequestReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientRequestReply* New() const final {
    return CreateMaybeMessage<ClientRequestReply>(NULL);
  }

  ClientRequestReply* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientRequestReply>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientRequestReply& from);
  void MergeFrom(const ClientRequestReply& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientRequestReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string leaderHint = 2;
  void clear_leaderhint();
  static const int kLeaderHintFieldNumber = 2;
  const ::std::string& leaderhint() const;
  void set_leaderhint(const ::std::string& value);
  #if LANG_CXX11
  void set_leaderhint(::std::string&& value);
  #endif
  void set_leaderhint(const char* value);
  void set_leaderhint(const char* value, size_t size);
  ::std::string* mutable_leaderhint();
  ::std::string* release_leaderhint();
  void set_allocated_leaderhint(::std::string* leaderhint);

  // string response = 3;
  void clear_response();
  static const int kResponseFieldNumber = 3;
  const ::std::string& response() const;
  void set_response(const ::std::string& value);
  #if LANG_CXX11
  void set_response(::std::string&& value);
  #endif
  void set_response(const char* value);
  void set_response(const char* value, size_t size);
  ::std::string* mutable_response();
  ::std::string* release_response();
  void set_allocated_response(::std::string* response);

  // .quintet.rpc.Status status = 1;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  ::quintet::rpc::Status status() const;
  void set_status(::quintet::rpc::Status value);

  // @@protoc_insertion_point(class_scope:quintet.rpc.ClientRequestReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr leaderhint_;
  ::google::protobuf::internal::ArenaStringPtr response_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_external_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Empty

// -------------------------------------------------------------------

// RegisterClientReply

// .quintet.rpc.Status status = 1;
inline void RegisterClientReply::clear_status() {
  status_ = 0;
}
inline ::quintet::rpc::Status RegisterClientReply::status() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RegisterClientReply.status)
  return static_cast< ::quintet::rpc::Status >(status_);
}
inline void RegisterClientReply::set_status(::quintet::rpc::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.RegisterClientReply.status)
}

// string clientId = 2;
inline void RegisterClientReply::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterClientReply::clientid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RegisterClientReply.clientId)
  return clientid_.GetNoArena();
}
inline void RegisterClientReply::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.RegisterClientReply.clientId)
}
#if LANG_CXX11
inline void RegisterClientReply::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.RegisterClientReply.clientId)
}
#endif
inline void RegisterClientReply::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.RegisterClientReply.clientId)
}
inline void RegisterClientReply::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.RegisterClientReply.clientId)
}
inline ::std::string* RegisterClientReply::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.RegisterClientReply.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterClientReply::release_clientid() {
  // @@protoc_insertion_point(field_release:quintet.rpc.RegisterClientReply.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterClientReply::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.RegisterClientReply.clientId)
}

// string leaderHint = 3;
inline void RegisterClientReply::clear_leaderhint() {
  leaderhint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RegisterClientReply::leaderhint() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.RegisterClientReply.leaderHint)
  return leaderhint_.GetNoArena();
}
inline void RegisterClientReply::set_leaderhint(const ::std::string& value) {
  
  leaderhint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.RegisterClientReply.leaderHint)
}
#if LANG_CXX11
inline void RegisterClientReply::set_leaderhint(::std::string&& value) {
  
  leaderhint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.RegisterClientReply.leaderHint)
}
#endif
inline void RegisterClientReply::set_leaderhint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  leaderhint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.RegisterClientReply.leaderHint)
}
inline void RegisterClientReply::set_leaderhint(const char* value, size_t size) {
  
  leaderhint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.RegisterClientReply.leaderHint)
}
inline ::std::string* RegisterClientReply::mutable_leaderhint() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.RegisterClientReply.leaderHint)
  return leaderhint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RegisterClientReply::release_leaderhint() {
  // @@protoc_insertion_point(field_release:quintet.rpc.RegisterClientReply.leaderHint)
  
  return leaderhint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RegisterClientReply::set_allocated_leaderhint(::std::string* leaderhint) {
  if (leaderhint != NULL) {
    
  } else {
    
  }
  leaderhint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderhint);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.RegisterClientReply.leaderHint)
}

// -------------------------------------------------------------------

// ClientRequestMessage

// string clientId = 1;
inline void ClientRequestMessage::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestMessage::clientid() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.ClientRequestMessage.clientId)
  return clientid_.GetNoArena();
}
inline void ClientRequestMessage::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.ClientRequestMessage.clientId)
}
#if LANG_CXX11
inline void ClientRequestMessage::set_clientid(::std::string&& value) {
  
  clientid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.ClientRequestMessage.clientId)
}
#endif
inline void ClientRequestMessage::set_clientid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.ClientRequestMessage.clientId)
}
inline void ClientRequestMessage::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.ClientRequestMessage.clientId)
}
inline ::std::string* ClientRequestMessage::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.ClientRequestMessage.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestMessage::release_clientid() {
  // @@protoc_insertion_point(field_release:quintet.rpc.ClientRequestMessage.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestMessage::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.ClientRequestMessage.clientId)
}

// uint64 sequenceNum = 2;
inline void ClientRequestMessage::clear_sequencenum() {
  sequencenum_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ClientRequestMessage::sequencenum() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.ClientRequestMessage.sequenceNum)
  return sequencenum_;
}
inline void ClientRequestMessage::set_sequencenum(::google::protobuf::uint64 value) {
  
  sequencenum_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.ClientRequestMessage.sequenceNum)
}

// string opName = 3;
inline void ClientRequestMessage::clear_opname() {
  opname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestMessage::opname() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.ClientRequestMessage.opName)
  return opname_.GetNoArena();
}
inline void ClientRequestMessage::set_opname(const ::std::string& value) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.ClientRequestMessage.opName)
}
#if LANG_CXX11
inline void ClientRequestMessage::set_opname(::std::string&& value) {
  
  opname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.ClientRequestMessage.opName)
}
#endif
inline void ClientRequestMessage::set_opname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.ClientRequestMessage.opName)
}
inline void ClientRequestMessage::set_opname(const char* value, size_t size) {
  
  opname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.ClientRequestMessage.opName)
}
inline ::std::string* ClientRequestMessage::mutable_opname() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.ClientRequestMessage.opName)
  return opname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestMessage::release_opname() {
  // @@protoc_insertion_point(field_release:quintet.rpc.ClientRequestMessage.opName)
  
  return opname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestMessage::set_allocated_opname(::std::string* opname) {
  if (opname != NULL) {
    
  } else {
    
  }
  opname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), opname);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.ClientRequestMessage.opName)
}

// string args = 4;
inline void ClientRequestMessage::clear_args() {
  args_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestMessage::args() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.ClientRequestMessage.args)
  return args_.GetNoArena();
}
inline void ClientRequestMessage::set_args(const ::std::string& value) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.ClientRequestMessage.args)
}
#if LANG_CXX11
inline void ClientRequestMessage::set_args(::std::string&& value) {
  
  args_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.ClientRequestMessage.args)
}
#endif
inline void ClientRequestMessage::set_args(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.ClientRequestMessage.args)
}
inline void ClientRequestMessage::set_args(const char* value, size_t size) {
  
  args_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.ClientRequestMessage.args)
}
inline ::std::string* ClientRequestMessage::mutable_args() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.ClientRequestMessage.args)
  return args_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestMessage::release_args() {
  // @@protoc_insertion_point(field_release:quintet.rpc.ClientRequestMessage.args)
  
  return args_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestMessage::set_allocated_args(::std::string* args) {
  if (args != NULL) {
    
  } else {
    
  }
  args_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), args);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.ClientRequestMessage.args)
}

// -------------------------------------------------------------------

// ClientRequestReply

// .quintet.rpc.Status status = 1;
inline void ClientRequestReply::clear_status() {
  status_ = 0;
}
inline ::quintet::rpc::Status ClientRequestReply::status() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.ClientRequestReply.status)
  return static_cast< ::quintet::rpc::Status >(status_);
}
inline void ClientRequestReply::set_status(::quintet::rpc::Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:quintet.rpc.ClientRequestReply.status)
}

// string leaderHint = 2;
inline void ClientRequestReply::clear_leaderhint() {
  leaderhint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestReply::leaderhint() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.ClientRequestReply.leaderHint)
  return leaderhint_.GetNoArena();
}
inline void ClientRequestReply::set_leaderhint(const ::std::string& value) {
  
  leaderhint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.ClientRequestReply.leaderHint)
}
#if LANG_CXX11
inline void ClientRequestReply::set_leaderhint(::std::string&& value) {
  
  leaderhint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.ClientRequestReply.leaderHint)
}
#endif
inline void ClientRequestReply::set_leaderhint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  leaderhint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.ClientRequestReply.leaderHint)
}
inline void ClientRequestReply::set_leaderhint(const char* value, size_t size) {
  
  leaderhint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.ClientRequestReply.leaderHint)
}
inline ::std::string* ClientRequestReply::mutable_leaderhint() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.ClientRequestReply.leaderHint)
  return leaderhint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestReply::release_leaderhint() {
  // @@protoc_insertion_point(field_release:quintet.rpc.ClientRequestReply.leaderHint)
  
  return leaderhint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestReply::set_allocated_leaderhint(::std::string* leaderhint) {
  if (leaderhint != NULL) {
    
  } else {
    
  }
  leaderhint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leaderhint);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.ClientRequestReply.leaderHint)
}

// string response = 3;
inline void ClientRequestReply::clear_response() {
  response_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClientRequestReply::response() const {
  // @@protoc_insertion_point(field_get:quintet.rpc.ClientRequestReply.response)
  return response_.GetNoArena();
}
inline void ClientRequestReply::set_response(const ::std::string& value) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:quintet.rpc.ClientRequestReply.response)
}
#if LANG_CXX11
inline void ClientRequestReply::set_response(::std::string&& value) {
  
  response_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:quintet.rpc.ClientRequestReply.response)
}
#endif
inline void ClientRequestReply::set_response(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:quintet.rpc.ClientRequestReply.response)
}
inline void ClientRequestReply::set_response(const char* value, size_t size) {
  
  response_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:quintet.rpc.ClientRequestReply.response)
}
inline ::std::string* ClientRequestReply::mutable_response() {
  
  // @@protoc_insertion_point(field_mutable:quintet.rpc.ClientRequestReply.response)
  return response_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClientRequestReply::release_response() {
  // @@protoc_insertion_point(field_release:quintet.rpc.ClientRequestReply.response)
  
  return response_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClientRequestReply::set_allocated_response(::std::string* response) {
  if (response != NULL) {
    
  } else {
    
  }
  response_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response);
  // @@protoc_insertion_point(field_set_allocated:quintet.rpc.ClientRequestReply.response)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace rpc
}  // namespace quintet

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::quintet::rpc::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::quintet::rpc::Status>() {
  return ::quintet::rpc::Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_external_2eproto
