// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: external.proto
#ifndef GRPC_external_2eproto__INCLUDED
#define GRPC_external_2eproto__INCLUDED

#include "external.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace quintet {
namespace rpc {

class External final {
 public:
  static constexpr char const* service_full_name() {
    return "quintet.rpc.External";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::quintet::rpc::RegisterClientReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::RegisterClientReply>> AsyncRegisterClient(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::RegisterClientReply>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::RegisterClientReply>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::RegisterClientReply>>(PrepareAsyncRegisterClientRaw(context, request, cq));
    }
    virtual ::grpc::Status ClientRequest(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::quintet::rpc::ClientRequestReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::ClientRequestReply>> AsyncClientRequest(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::ClientRequestReply>>(AsyncClientRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::ClientRequestReply>> PrepareAsyncClientRequest(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::ClientRequestReply>>(PrepareAsyncClientRequestRaw(context, request, cq));
    }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::RegisterClientReply>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::RegisterClientReply>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::ClientRequestReply>* AsyncClientRequestRaw(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::quintet::rpc::ClientRequestReply>* PrepareAsyncClientRequestRaw(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status RegisterClient(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::quintet::rpc::RegisterClientReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>> AsyncRegisterClient(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>>(AsyncRegisterClientRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>> PrepareAsyncRegisterClient(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>>(PrepareAsyncRegisterClientRaw(context, request, cq));
    }
    ::grpc::Status ClientRequest(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::quintet::rpc::ClientRequestReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>> AsyncClientRequest(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>>(AsyncClientRequestRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>> PrepareAsyncClientRequest(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>>(PrepareAsyncClientRequestRaw(context, request, cq));
    }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    ::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>* AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>* PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>* AsyncClientRequestRaw(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>* PrepareAsyncClientRequestRaw(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_RegisterClient_;
    const ::grpc::internal::RpcMethod rpcmethod_ClientRequest_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::quintet::rpc::Empty* request, ::quintet::rpc::RegisterClientReply* response);
    virtual ::grpc::Status ClientRequest(::grpc::ServerContext* context, const ::quintet::rpc::ClientRequestMessage* request, ::quintet::rpc::ClientRequestReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_RegisterClient() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::quintet::rpc::Empty* request, ::quintet::rpc::RegisterClientReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegisterClient(::grpc::ServerContext* context, ::quintet::rpc::Empty* request, ::grpc::ServerAsyncResponseWriter< ::quintet::rpc::RegisterClientReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ClientRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ClientRequest() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ClientRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientRequest(::grpc::ServerContext* context, const ::quintet::rpc::ClientRequestMessage* request, ::quintet::rpc::ClientRequestReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestClientRequest(::grpc::ServerContext* context, ::quintet::rpc::ClientRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::quintet::rpc::ClientRequestReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_RegisterClient<WithAsyncMethod_ClientRequest<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_RegisterClient() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::quintet::rpc::Empty* request, ::quintet::rpc::RegisterClientReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ClientRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ClientRequest() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ClientRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ClientRequest(::grpc::ServerContext* context, const ::quintet::rpc::ClientRequestMessage* request, ::quintet::rpc::ClientRequestReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RegisterClient : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_RegisterClient() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::quintet::rpc::Empty, ::quintet::rpc::RegisterClientReply>(std::bind(&WithStreamedUnaryMethod_RegisterClient<BaseClass>::StreamedRegisterClient, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_RegisterClient() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RegisterClient(::grpc::ServerContext* context, const ::quintet::rpc::Empty* request, ::quintet::rpc::RegisterClientReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegisterClient(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::quintet::rpc::Empty,::quintet::rpc::RegisterClientReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ClientRequest : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ClientRequest() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::quintet::rpc::ClientRequestMessage, ::quintet::rpc::ClientRequestReply>(std::bind(&WithStreamedUnaryMethod_ClientRequest<BaseClass>::StreamedClientRequest, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ClientRequest() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ClientRequest(::grpc::ServerContext* context, const ::quintet::rpc::ClientRequestMessage* request, ::quintet::rpc::ClientRequestReply* response) final override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedClientRequest(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::quintet::rpc::ClientRequestMessage,::quintet::rpc::ClientRequestReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_RegisterClient<WithStreamedUnaryMethod_ClientRequest<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_RegisterClient<WithStreamedUnaryMethod_ClientRequest<Service > > StreamedService;
};

}  // namespace rpc
}  // namespace quintet


#endif  // GRPC_external_2eproto__INCLUDED
