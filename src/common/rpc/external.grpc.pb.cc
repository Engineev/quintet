// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: external.proto

#include "external.pb.h"
#include "external.grpc.pb.h"

#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace quintet {
namespace rpc {

static const char* External_method_names[] = {
  "/quintet.rpc.External/RegisterClient",
  "/quintet.rpc.External/ClientRequest",
};

std::unique_ptr< External::Stub> External::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< External::Stub> stub(new External::Stub(channel));
  return stub;
}

External::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_RegisterClient_(External_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ClientRequest_(External_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status External::Stub::RegisterClient(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::quintet::rpc::RegisterClientReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RegisterClient_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>* External::Stub::AsyncRegisterClientRaw(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::RegisterClientReply>::Create(channel_.get(), cq, rpcmethod_RegisterClient_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::RegisterClientReply>* External::Stub::PrepareAsyncRegisterClientRaw(::grpc::ClientContext* context, const ::quintet::rpc::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::RegisterClientReply>::Create(channel_.get(), cq, rpcmethod_RegisterClient_, context, request, false);
}

::grpc::Status External::Stub::ClientRequest(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::quintet::rpc::ClientRequestReply* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ClientRequest_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>* External::Stub::AsyncClientRequestRaw(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::ClientRequestReply>::Create(channel_.get(), cq, rpcmethod_ClientRequest_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::quintet::rpc::ClientRequestReply>* External::Stub::PrepareAsyncClientRequestRaw(::grpc::ClientContext* context, const ::quintet::rpc::ClientRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::quintet::rpc::ClientRequestReply>::Create(channel_.get(), cq, rpcmethod_ClientRequest_, context, request, false);
}

External::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      External_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< External::Service, ::quintet::rpc::Empty, ::quintet::rpc::RegisterClientReply>(
          std::mem_fn(&External::Service::RegisterClient), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      External_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< External::Service, ::quintet::rpc::ClientRequestMessage, ::quintet::rpc::ClientRequestReply>(
          std::mem_fn(&External::Service::ClientRequest), this)));
}

External::Service::~Service() {
}

::grpc::Status External::Service::RegisterClient(::grpc::ServerContext* context, const ::quintet::rpc::Empty* request, ::quintet::rpc::RegisterClientReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status External::Service::ClientRequest(::grpc::ServerContext* context, const ::quintet::rpc::ClientRequestMessage* request, ::quintet::rpc::ClientRequestReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace quintet
}  // namespace rpc

